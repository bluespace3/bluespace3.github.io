<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/css/xml-style.css" type="text/css"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pytest on 蓝色空间号-新世界的探索者</title><link>https://bluespace3.github.io/</link><description>Recent content in Pytest on 蓝色空间号-新世界的探索者</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 18 Apr 2025 12:59:32 +0800</lastBuildDate><atom:link href="https://bluespace3.github.io/categories/pytest/index.xml" rel="self" type="application/rss+xml"/><item><title>快速上手pytest项目</title><link>https://bluespace3.github.io/post/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bpytest%E9%A1%B9%E7%9B%AE/</link><pubDate>Fri, 18 Apr 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bpytest%E9%A1%B9%E7%9B%AE/</guid><description>&lt;h2 id="tags-pytest-python">
&lt;a class="header-anchor" href="#tags-pytest-python">&lt;/a>
tags: [&amp;ldquo;pytest&amp;rdquo;, &amp;ldquo;python&amp;rdquo;]
&lt;/h2>&lt;h1 id="快速上手pytest接口测试">
&lt;a class="header-anchor" href="#%e5%bf%ab%e9%80%9f%e4%b8%8a%e6%89%8bpytest%e6%8e%a5%e5%8f%a3%e6%b5%8b%e8%af%95">&lt;/a>
快速上手Pytest接口测试
&lt;/h1>&lt;h1 id="背景">
&lt;a class="header-anchor" href="#%e8%83%8c%e6%99%af">&lt;/a>
背景
&lt;/h1>&lt;p>以前有分享过httprunner+pytest相关的使用方法，并且一直使用httprunner编写用自动化脚本，以前的经验可以快速帮我们上手pytest框架。为了快速上手pytest，HttpRunner 与Pytest 在编写自动化脚本异同点对比：&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h1 id="项目初始化">
&lt;a class="header-anchor" href="#%e9%a1%b9%e7%9b%ae%e5%88%9d%e5%a7%8b%e5%8c%96">&lt;/a>
项目初始化
&lt;/h1>&lt;p>克隆项目◦ git clone &lt;a href="mailto:git@gitlab.guangpuyun.cn">git@gitlab.guangpuyun.cn&lt;/a>:clinic-diag/test/poct_api_test.git
了解项目结构&lt;/p>
&lt;p>&lt;img src="https://bluespace3.github.io/images/528752a3cec6442b7fb16aabcf1f313f94a9b0c3c9a71d46f85a3bb0ab45bcc6.jpg" alt="">&lt;/p>
&lt;h1 id="安装依赖">
&lt;a class="header-anchor" href="#%e5%ae%89%e8%a3%85%e4%be%9d%e8%b5%96">&lt;/a>
安装依赖
&lt;/h1>&lt;p>◦ 项目根目录下打开终端，执行pip install -r requirements.txt&lt;/p>
&lt;h1 id="测试用例格式">
&lt;a class="header-anchor" href="#%e6%b5%8b%e8%af%95%e7%94%a8%e4%be%8b%e6%a0%bc%e5%bc%8f">&lt;/a>
测试用例格式
&lt;/h1>&lt;ol>
&lt;li>用例文件以test_开头或_test结尾◦ 建议以场景命名-如四合一的快速检测：test_zk_quicktest.py&lt;/li>
&lt;li>用例集合——类，以Test开头（可以无）◦ 包含1个或多个测试用例函数&lt;/li>
&lt;li>测试用例函数以test_开头◦ 一个函数代表一条用例- $_-&amp;gt;$ 一个明确的测试点&lt;/li>
&lt;/ol>
&lt;h1 id="用例转换">
&lt;a class="header-anchor" href="#%e7%94%a8%e4%be%8b%e8%bd%ac%e6%8d%a2">&lt;/a>
用例转换
&lt;/h1>&lt;p>1、运行脚本utils/swaager.py——爬取swagger文档资源,存放于/api/swaggerApi目录
2、运行脚本api/generateTestCases.py，生成基础用例，存放于/api目录
3、基础用例结构&lt;/p>
&lt;p>此时只是生成了接口的对象，还需要编写实现逻辑和传参进一步实现该对象，完成测试用例编写（见用例编写）&lt;/p>
&lt;p>&lt;img src="https://bluespace3.github.io/images/e2e3d30579d03e71fcd65320f80da7a2b548bfc1056245fa3d54b9669e3ce7c3.jpg" alt="">&lt;/p>
&lt;h1 id="用例编写">
&lt;a class="header-anchor" href="#%e7%94%a8%e4%be%8b%e7%bc%96%e5%86%99">&lt;/a>
用例编写
&lt;/h1>&lt;ol>
&lt;li>在/test对应的目录下新建用例文件，命名以test_开头，表明测试场景&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://bluespace3.github.io/mages/3dcd5da9b6d6fde4508a1aada61ca3d3486938faed0f48a273a4a4ac026db38f.jpg" alt="">&lt;/p>
&lt;ol start="2">
&lt;li>导入必要的包和基础用例，如：&lt;/li>
&lt;/ol>
&lt;p>from utils.logger import loggerfrom api.poctMina.addcartusingPosT import YsbMallCartController&lt;/p>
&lt;h1 id="3-编写测试用例">
&lt;a class="header-anchor" href="#3-%e7%bc%96%e5%86%99%e6%b5%8b%e8%af%95%e7%94%a8%e4%be%8b">&lt;/a>
3. 编写测试用例
&lt;/h1>&lt;p>from utils.logger import logger fron api.poctMina.addCartUsinqPosT import YsbMallCartController def test_addCartUsing(getTokenBySecret,pytestconfig): 用例名称-体现在报告上 addCartUsing $\mathbf{\sigma}=\mathbf{\sigma}$ YsbHallCartController ( addcartUsing.base_url $\mathbf{\sigma}=\mathbf{\sigma}$ pytestconfig.getini(&amp;lsquo;poct-host&amp;rsquo;) 构造url addCartUsinq.data[&amp;lsquo;addNum&amp;rsquo;]=1 addCartUsing.data[&amp;lsquo;packageId&amp;rsquo;] $=2\dot{0}\dot{\Theta}$ addCartUsing.data[*token&amp;rsquo;]=getTokenBySecret(store=3o15659) 构造传参 response_data=addcartUsing.addcart() .json() 获取返回值 logger.info(response_data) assert response_data[&amp;lsquo;code&amp;rsquo;] $\scriptstyle==$ &amp;lsquo;40001&amp;rsquo; 断言&lt;/p></description></item><item><title>pytest入门指南</title><link>https://bluespace3.github.io/post/pytest-intro/</link><pubDate>Thu, 20 Mar 2025 13:42:48 +0800</pubDate><guid>https://bluespace3.github.io/post/pytest-intro/</guid><description>&lt;h2 id="什么是pytest">
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%afpytest">&lt;/a>
什么是pytest？
&lt;/h2>&lt;p>pytest是一个功能强大且易于使用的Python测试框架。它可以帮助开发者编写简洁、可读性强的测试代码，并提供丰富的插件支持。&lt;/p>
&lt;h2 id="pytest的主要特点">
&lt;a class="header-anchor" href="#pytest%e7%9a%84%e4%b8%bb%e8%a6%81%e7%89%b9%e7%82%b9">&lt;/a>
pytest的主要特点
&lt;/h2>&lt;ul>
&lt;li>简洁的测试用例编写方式&lt;/li>
&lt;li>自动发现测试用例&lt;/li>
&lt;li>支持参数化测试&lt;/li>
&lt;li>强大的断言功能&lt;/li>
&lt;li>丰富的插件生态系统&lt;/li>
&lt;/ul>
&lt;h2 id="安装pytest">
&lt;a class="header-anchor" href="#%e5%ae%89%e8%a3%85pytest">&lt;/a>
安装pytest
&lt;/h2>&lt;p>使用以下命令安装pytest：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install pytest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编写测试用例">
&lt;a class="header-anchor" href="#%e7%bc%96%e5%86%99%e6%b5%8b%e8%af%95%e7%94%a8%e4%be%8b">&lt;/a>
编写测试用例
&lt;/h2>&lt;p>一个简单的pytest测试用例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_addition&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_subtraction&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行测试">
&lt;a class="header-anchor" href="#%e8%bf%90%e8%a1%8c%e6%b5%8b%e8%af%95">&lt;/a>
运行测试
&lt;/h2>&lt;p>使用以下命令运行pytest测试：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pytest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参数化测试">
&lt;a class="header-anchor" href="#%e5%8f%82%e6%95%b0%e5%8c%96%e6%b5%8b%e8%af%95">&lt;/a>
参数化测试
&lt;/h2>&lt;p>pytest支持参数化测试，可以使用&lt;code>@pytest.mark.parametrize&lt;/code>装饰器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pytest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pytest.mark.parametrize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test_input,expected&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;3+5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2+4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;6*9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_input&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expected&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">expected&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">
&lt;a class="header-anchor" href="#%e6%80%bb%e7%bb%93">&lt;/a>
总结
&lt;/h2>&lt;p>pytest是一个功能强大且易于使用的Python测试框架，可以帮助开发者编写简洁、可读性强的测试代码。通过本指南，您已经了解了pytest的基本使用方法，接下来可以探索更多高级功能。&lt;/p></description></item></channel></rss>