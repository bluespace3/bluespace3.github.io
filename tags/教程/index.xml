<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/css/xml-style.css" type="text/css"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>教程 on 蓝色空间号-新世界的探索者</title><link>https://bluespace3.github.io/</link><description>Recent content in 教程 on 蓝色空间号-新世界的探索者</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 06 Apr 2025 09:59:32 +0800</lastBuildDate><atom:link href="https://bluespace3.github.io/tags/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 常用命令记录</title><link>https://bluespace3.github.io/post/git%E6%93%8D%E4%BD%9C/</link><pubDate>Sun, 06 Apr 2025 09:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/git%E6%93%8D%E4%BD%9C/</guid><description>&lt;h4 id="回滚到指定提交">回滚到指定提交&lt;/h4>
&lt;ol>
&lt;li>git reset &amp;ndash;hard c1ac53850b0314a20e97f669bafc8bb67a3a1124&lt;/li>
&lt;li>git push&lt;/li>
&lt;/ol>
&lt;h4 id="放弃变更强制提交">放弃变更强制提交&lt;/h4>
&lt;ul>
&lt;li>git reset &amp;ndash;hard ; git pull &amp;ndash;force&lt;/li>
&lt;/ul>
&lt;h4 id="子模块的使用">子模块的使用&lt;/h4>
&lt;p>&lt;img src="https://bluespace3.github.io/images/361743670309_.pic.jpg" alt="子模块使用">&lt;/p></description></item><item><title>Markdown文档编写不完全指南</title><link>https://bluespace3.github.io/post/md%E6%A0%BC%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link><pubDate>Thu, 03 Apr 2025 16:21:23 +0800</pubDate><guid>https://bluespace3.github.io/post/md%E6%A0%BC%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid><description>&lt;h2 id="一核心语法精要">一、核心语法精要&lt;/h2>
&lt;h3 id="1-标题与段落">1. 标题与段落&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="gh"># 主标题（H1）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gh">&lt;/span>&lt;span class="gu">## 二级标题（H2）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span>普通段落直接换行书写，空行分隔段落
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">2.&lt;/span> 列表系统
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">无序列表项
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[x] 已完成任务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[ ] 待办事项
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">有序列表
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">第二项
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">3.&lt;/span> 代码展示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">```python
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def hello_hugo():
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(&amp;#34;Welcome to Hugo Blog!&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>二、Hugo增强特性&lt;/p>
&lt;ol>
&lt;li>短代码应用
{{&amp;lt; highlight python &amp;ldquo;linenos=table&amp;rdquo; /&amp;gt;}}
def hugo_shortcode():
return &amp;ldquo;Hugo特色功能&amp;rdquo;
{{&amp;lt;/ /highlight &amp;gt;}}&lt;/li>
&lt;li>响应式图片
{{&amp;lt; image
src=&amp;quot;/images/md-example.png&amp;quot;
alt=&amp;ldquo;Markdown示例&amp;rdquo;
caption=&amp;ldquo;图1. 文档结构示意图&amp;rdquo;
width=&amp;ldquo;80%&amp;rdquo;
&lt;blockquote>
&lt;p>}}&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="gu">### 1. 基础语法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span>```markdown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">![&lt;span class="nt">替代文字&lt;/span>](&lt;span class="na">图片路径&lt;/span>)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">示例：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">![&lt;span class="nt">技术架构图&lt;/span>](&lt;span class="na">/images/tech-arch.png&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>三、可视化元素
流程图示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">graph TD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">A[开始] --&amp;gt; B{判断}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">B --&amp;gt;|条件1| C[操作1]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">B --&amp;gt;|条件2| D[操作2]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>数据表格&lt;/p></description></item><item><title>提示词技巧</title><link>https://bluespace3.github.io/post/%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%8A%80%E5%B7%A7/</link><pubDate>Sat, 29 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%8A%80%E5%B7%A7/</guid><description>&lt;p>提示词技巧
总结：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329152414.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329153529.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329153627.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329153708.png" alt="">
&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329153716.png" alt="">&lt;/p>
&lt;p>官方提示词库：
&lt;a href="https://api-docs.deepseek.com/zh-cn/prompt-library">https://api-docs.deepseek.com/zh-cn/prompt-library&lt;/a>&lt;/p></description></item><item><title>加密文章示例</title><link>https://bluespace3.github.io/post/encrypted-example/</link><pubDate>Tue, 25 Mar 2025 12:00:00 +0800</pubDate><guid>https://bluespace3.github.io/post/encrypted-example/</guid><description>&lt;h2 id="这是一篇加密的文章">这是一篇加密的文章&lt;/h2>
&lt;p>只有输入正确的密码才能查看这篇文章的内容。&lt;/p>
&lt;h3 id="如何设置文章加密">如何设置文章加密&lt;/h3>
&lt;p>在文章的前置参数中添加以下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">encrypted&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;你的密码&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就可以为文章添加密码保护了。&lt;/p>
&lt;h3 id="密码保护的工作原理">密码保护的工作原理&lt;/h3>
&lt;ol>
&lt;li>当用户访问加密文章时，会显示密码输入框&lt;/li>
&lt;li>用户输入正确的密码后，文章内容才会显示&lt;/li>
&lt;li>密码验证在浏览器端进行，不需要服务器支持&lt;/li>
&lt;li>使用sessionStorage保存解锁状态，避免刷新页面后需要重新输入密码&lt;/li>
&lt;/ol>
&lt;h3 id="注意事项">注意事项&lt;/h3>
&lt;ul>
&lt;li>这种加密方式只是前端加密，不能防止真正的黑客攻击&lt;/li>
&lt;li>适合用于简单的内容保护，不适合保护高度敏感的信息&lt;/li>
&lt;li>密码直接保存在文章的前置参数中，所以不要使用您在其他地方使用的重要密码&lt;/li>
&lt;/ul></description></item><item><title>将github变为免费图床</title><link>https://bluespace3.github.io/post/%E4%BD%BF%E7%94%A8gihub%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/</link><pubDate>Fri, 21 Mar 2025 23:00:32 +0800</pubDate><guid>https://bluespace3.github.io/post/%E4%BD%BF%E7%94%A8gihub%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/</guid><description>&lt;h2 id="使用-github-作为免费图床的文档">使用 GitHub 作为免费图床的文档&lt;/h2>
&lt;p>最近就想找一款免费的图床来放置自己的图片，逛了一圈下来发现GitHub可以白嫖，于是乎，就有了这篇文章。&lt;/p>
&lt;p>GitHub 是一个非常流行的代码托管平台，除了代码存储外，你还可以使用 GitHub 来托管静态资源，比如图片。通过将图片上传到 GitHub 的仓库，你可以轻松获取图片的 URL，从而在网页或文档中嵌入这些图片。以下是如何使用 GitHub 作为免费图床的详细步骤。&lt;/p>
&lt;h3 id="步骤-1-创建-github-仓库">步骤 1: 创建 GitHub 仓库&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>登录到 &lt;a href="https://github.com/">GitHub&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击右上角的 &amp;ldquo;+&amp;rdquo; 按钮，然后选择 &amp;ldquo;New repository&amp;rdquo;。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>填写仓库的名称（例如：&lt;code>my-image-hosting&lt;/code>），并设置为公开（Public）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击 &amp;ldquo;Create repository&amp;rdquo; 创建仓库。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://pic3.zhimg.com/v2-cdd72cbacf64cf512b0426eb2362d3e6_1440w.jpg" alt="">&lt;/p>
&lt;h3 id="步骤-2-github获取个人的token">步骤 2: GitHub获取个人的Token&lt;/h3>
&lt;ol>
&lt;li>访问：&lt;a href="https://github.com/settings/tokens">settings-tokens&lt;/a> ，点击&lt;strong>Generate new token&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://picx.zhimg.com/v2-2148c04aa5bc07ccea01b2273ba65033_1440w.jpg" alt="">&lt;/p>
&lt;p>2.设置 token 属性 ，Expiration：永不过期，Select scopes：&lt;code>repo&lt;/code> 一定要全选，其他的无所谓 ，点击最下方&lt;strong>创建&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://pica.zhimg.com/v2-ef2f47f1c64e0b095e040cf103ea8b62_1440w.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>就会获得一个token字符串， &lt;strong>⚠️ 注意：一定要收藏好 token，因为只会显示一次！&lt;/strong>，关掉这个页面就再也看不见了。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>[!IMPORTANT] &lt;strong>后续会继续使用这个token!!!!&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://pica.zhimg.com/v2-7efb7778246d4e3964471f46c290f790_1440w.jpg" alt="">&lt;/p>
&lt;h3 id="步骤-3-下载picgo">步骤 3: 下载PicGo&lt;/h3>
&lt;ol>
&lt;li>在PicGo最新页面上下载它的安装包。&lt;a href="https://github.com/Molunerfinn/PicGo/releases">PicGo下载页面&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://picx.zhimg.com/v2-4e1070ec6988ea104dd9f339af322d4b_1440w.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装PicGo。无需赘述&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置GitHub&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://picx.zhimg.com/v2-86772b08f48e060e991b724d7d11b677_1440w.jpg" alt="">&lt;/p>
&lt;p>​&lt;/p>
&lt;ol>
&lt;li>&lt;strong>PicGo 上传区配置选中你的配置&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://pic4.zhimg.com/v2-01a76c0126a75365b9bdc2e2163edda7_1440w.jpg" alt="">&lt;/p>
&lt;p>​ 选择完成配置之后就可以拖拉拽上传文件了。&lt;/p>
&lt;h3 id="步骤-4-typora中使用">步骤 4: &lt;a href="https://zhida.zhihu.com/search?content_id=253465306&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=Typora&amp;amp;zhida_source=entity">Typora&lt;/a>中使用&lt;/h3>
&lt;ol>
&lt;li>打开Typora，在文件选项中选中偏好设置。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://pic3.zhimg.com/v2-b7c8c84a3f9046e6003ca2ca01e08540_1440w.jpg" alt="">&lt;/p></description></item><item><title>测试平台教程</title><link>https://bluespace3.github.io/post/%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%88%86%E4%BA%AB/</link><pubDate>Fri, 21 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%88%86%E4%BA%AB/</guid><description>&lt;p>一、基本介绍：（）
桌面端工具（一年左右），使用python的wxpython框架编写，使用pyinstaller打包为桌面exe文件；缺点：体积大，不便于分享；&lt;/p>
&lt;p>&lt;img src="./images/image_0fa5b6bdd33056f5c14c2ba21dca4298.png" alt="">&lt;/p>
&lt;p>web端应用（10月初至今）：flask+vue实现；优点，通过脚本实现热更新；链接形式便于分享。&lt;/p>
&lt;p>&lt;img src="./images/image_554bf84092b63f4dfeef955bec300c72.png" alt="">&lt;/p>
&lt;p>二、功能介绍：&lt;/p>
&lt;p>&lt;img src="./images/image_d8f9cc72d69a56ab872809e6e0c32ca7.png" alt="">&lt;/p>
&lt;p>三、技术实现&lt;/p>
&lt;p>测试平台采用前后端分离的方式实现:&lt;/p>
&lt;ol>
&lt;li>后端由flask框架实现；
（1）flask项目结构&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./images/image_08bf969bb5e6e6a6c2866b5ecd815b9a.png" alt="">&lt;/p>
&lt;p>（2）在项目入口文件中构建接口
Flask：用于创建一个flask应用,app = Flask(&lt;strong>name&lt;/strong>)
CORS:解决跨域问题，cors = CORS(app)
request:接受请求的参数，request.args.get()；phone = request.json[]
jsonify:以json格式返回结果：jsonify({&amp;ldquo;data&amp;rdquo;: res})
接口的基本组成：&lt;/p>
&lt;p>&lt;img src="./images/image_1e0619b874f00563f4df88a914e7b216.png" alt="">&lt;/p>
&lt;p>构建一个接口的基本步骤：
导包：Flask、CORS、request、jsonify
在app.route()装饰器中定义接口的请求类型、url路径
写一个接口函数
获取入参（可选）
get请求 request.args.get()
post请求 request.json[]
对得到的参数进行基本校验：如参数类型校验、字段长度、是否空、鉴权等。
根据传参进行逻辑处理，调用对应功能，得到结果
构建响应头（可选，返回类型是文件时必须）
构建结果，使用jsonify将返回结果构建成一个js （可选）
return结果
启动flask
app.run(ip,port,debug=True),其中debug=True代表以调试模式启动，代码改动后自动重启；debug默认为False。
包的管理 requirements.txt
代码中引入了的包，需要填写在该文件中，格式：“ 包名==版本号”&lt;/p>
&lt;p>&lt;img src="./images/image_ddafd5dad0788c85d978475b2b619b09.png" alt="">&lt;/p>
&lt;p>（3）采用gunnicorn+gevent部署flask项目
介绍：
一个HTTP 服务器，可以增加项目的并发，通常和gevent一起使用。
安装gunicorn和gevent：
pip install gunicorn -i &lt;a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple&lt;/a>
pip install gevent-i &lt;a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple&lt;/a>
配置文件 gunicorn.conf.py
workers = 10 定义同时开启的处理请求的进程数量，根据网站流量适当调整
worker_class = &amp;ldquo;gevent&amp;rdquo; 采用gevent库，支持异步处理请求，提高吞吐量
bind = &amp;ldquo;0.0.0.0:80&amp;rdquo; 监听IP放宽，以便于Docker之间、Docker和宿主机之间的通信,docker部署固定
采用启动服务：
gunicorn flask_index:app -c ./gunicorn.conf.py
注意：Gunicorn只能运行在Linux环境中，不支持windows平台，因此在windows调试的时候不要用这个方式启动flask；
2. 前端：vue 、node.js（前端的包管理工具，类似python的pip包管理工具）、vue-cli（vue项目的脚手架）、element-ui、echats提供页面交互;&lt;/p></description></item><item><title>docker常用命令</title><link>https://bluespace3.github.io/post/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>docker pull ubuntu 载入ubuntu 镜像&lt;/p>
&lt;p>docker pull training/webapp # 载入镜像&lt;/p>
&lt;p>docker pull python:3.7 安装python镜像&lt;/p>
&lt;p>docker pull nginx 安装nginx镜像&lt;/p>
&lt;p>docker run -it python:3.7 /bin/bash 进入python镜像&lt;/p>
&lt;p>连接不上时，终端输入：&lt;/p>
&lt;p>1.cd &amp;ldquo;C:\Program Files\Docker\Docker&amp;rdquo;&lt;/p>
&lt;p>2.DockerCli.exe -SwitchDaemon&lt;/p>
&lt;p>docker run -it ubuntu /bin/bash 启用进入容器&lt;/p>
&lt;p>exit退出容器&lt;/p>
&lt;p>docker run -d -P training/webapp python app.py 后台启用容器并随机映射到本机端口&lt;/p>
&lt;p>docker run -d -p 5000:5000 training/webapp python app.py后台启用容器并指定映射到&lt;/p>
&lt;p>docker logs -f id 查看应用日志&lt;/p>
&lt;p>docker logs -f -t &amp;ndash;tail=100 dockerid 动态查看最新100条日志&lt;/p>
&lt;p>docker top id 查看容器内部应用进程&lt;/p>
&lt;p>docker ps -a 查看所有容器(可查容器id)&lt;/p></description></item><item><title>Git submodule</title><link>https://bluespace3.github.io/post/git-submodule/</link><pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/git-submodule/</guid><description>&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;a href="https://guangpuyun.feishu.cn/docx/J6CDd7QvkohJ3mxEKt3czp31nOe#J6CDd7QvkohJ3mxEKt3czp31nOe">Git submodule添加子项目_库&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://guangpuyun.feishu.cn/docx/J6CDd7QvkohJ3mxEKt3czp31nOe#doxcnEitqaRgfOoIdSuxwNhUaIc">Git归并策略&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://guangpuyun.feishu.cn/docx/J6CDd7QvkohJ3mxEKt3czp31nOe#doxcnel4BHYYT4Lw7SQHLqNXyue">添加&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://guangpuyun.feishu.cn/docx/J6CDd7QvkohJ3mxEKt3czp31nOe#doxcnrHxc9hpZYK1WtRbYlUQ91f">删除&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>输入“/”快速插入内容&lt;/p>
&lt;p>添加图标&lt;/p>
&lt;p>添加封面&lt;/p>
&lt;p>展示文档信息&lt;/p>
&lt;p>Git submodule添加子项目_库&lt;/p>
&lt;p>开发过程中，经常会有一些通用的部分希望抽取出来做成一个公共库来提供给别的工程来使用，而公共代码库的版本管理是个麻烦的事情。git submodule命令就可以解决这个问题。&lt;/p>
&lt;p>Git归并策略&lt;/p>
&lt;p>Git归并有两种策略：递归，章鱼。&lt;/p>
&lt;p>1.递归策略：当分支数只有两个的时候。&lt;/p>
&lt;p>2.章鱼策略：当分支数大于两个的时候。&lt;/p>
&lt;p>Git会自动选择归并的方法。&lt;/p>
&lt;p>3.子树策略：是Git另一种归并方法。（submodule）&lt;/p>
&lt;p>它可以把另一个子项目，嵌入到当前项目。而且会非常聪明的合并这些子项目。&lt;/p>
&lt;p>添加&lt;/p>
&lt;p>为当前工程添加submodule，命令如下：&lt;/p>
&lt;p>git submodule add 仓库地址 路径&lt;/p>
&lt;p>其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。&lt;/p>
&lt;p>注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）&lt;/p>
&lt;p>示例:&lt;/p>
&lt;p>git submodule add -f &lt;a href="http://git.cs/Cmblife_iOS_Internal/modulesLib.git">http://git.cs/Cmblife_iOS_Internal/modulesLib.git&lt;/a>&lt;/p>
&lt;p>-f 是强制的意思，一般不需要加&lt;/p>
&lt;p>命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。&lt;/p>
&lt;p>删除&lt;/p>
&lt;p>submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。&lt;/p>
&lt;p>下载的工程带有submodule&lt;/p>
&lt;p>当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：&lt;/p>
&lt;p>git submodule update –init –recursive&lt;/p>
&lt;p>即可将子模块内容下载下来后工程才不会缺少相应的文件。&lt;/p></description></item><item><title>git子项目</title><link>https://bluespace3.github.io/post/git%E6%B7%BB%E5%8A%A0%E5%AD%90%E9%A1%B9%E7%9B%AE/</link><pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/git%E6%B7%BB%E5%8A%A0%E5%AD%90%E9%A1%B9%E7%9B%AE/</guid><description>&lt;ul>
&lt;li>项目中添加子项目
&lt;ul>
&lt;li>1、git clone 父项目url&lt;/li>
&lt;li>2、cd 父项目对应目录下：git submodule add &amp;lt;子项目地址&amp;gt;&lt;/li>
&lt;li>3、git commit ;git push&lt;/li>
&lt;li>4、此时子项目下的子项目是空的，需要cd到父目录cmd执行：
git submodule update &amp;ndash;init &amp;ndash;recursive
或者执行：git submodule init 然后执行git submodule update&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>clone含嵌套项目的项目
&lt;ul>
&lt;li>git clone 父项目url &amp;ndash;recurse-submodules
不加&amp;ndash;recurse-submodules，克隆的子项目是空的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Hugo静态网站生成器入门指南</title><link>https://bluespace3.github.io/post/hugo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link><pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/hugo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid><description>&lt;h2 id="什么是hugo">什么是Hugo？&lt;/h2>
&lt;p>Hugo是一个用Go语言编写的快速、现代的静态网站生成器。它可以将Markdown文件转换为HTML页面，非常适合构建文档网站、博客等。&lt;/p>
&lt;h2 id="hugo的主要特点">Hugo的主要特点&lt;/h2>
&lt;ul>
&lt;li>极快的构建速度&lt;/li>
&lt;li>丰富的主题支持&lt;/li>
&lt;li>简单的Markdown内容管理&lt;/li>
&lt;li>强大的模板系统&lt;/li>
&lt;li>内置的短代码功能&lt;/li>
&lt;/ul>
&lt;h2 id="安装hugo">安装Hugo&lt;/h2>
&lt;p>在Windows上安装Hugo的步骤：&lt;/p>
&lt;ol>
&lt;li>下载Hugo的Windows版本&lt;/li>
&lt;li>解压到指定目录&lt;/li>
&lt;li>将Hugo的可执行文件路径添加到系统环境变量&lt;/li>
&lt;/ol>
&lt;h2 id="创建新站点">创建新站点&lt;/h2>
&lt;p>使用以下命令创建一个新的Hugo站点：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hugo new site mydocs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="下载插件">下载插件&lt;/h2>
&lt;h2 id="添加内容">添加内容&lt;/h2>
&lt;p>在content目录下创建Markdown文件来添加内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hugo new blog/my-first-post.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行开发服务器">运行开发服务器&lt;/h2>
&lt;p>使用以下命令启动开发服务器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hugo server -D --environment development &lt;span class="c1">#如果未设置环境变量则不需要指定环境。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="部署网站">部署网站&lt;/h2>
&lt;p>使用以下命令生成静态文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>然后将public目录下的文件部署到Web服务器即可，注意每次推送前运行hugo更新public文件夹&lt;/li>
&lt;li>若有更新域名，请删除public后，再运行hugo重新生成public，否则会出现路由错误的情况。&lt;/li>
&lt;li>为了方便新建.sh脚本文件，命名为.command.sh&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 判断是否已初始化Git仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> ! -d &lt;span class="s2">&amp;#34;.git&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;未检测到Git仓库，正在初始化...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Git仓库已初始化&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建.gitignore文件，排除不需要版本控制的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat &amp;gt; .gitignore &lt;span class="s">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">resources/
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">.DS_Store
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">node_modules/
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">.hugo_build.lock
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加所有文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 提交更改&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;更新博客&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 检查是否已关联远程仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REMOTE_URL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>git remote get-url origin 2&amp;gt;/dev/null&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$REMOTE_URL&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;未检测到远程仓库，正在添加...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git remote add origin https://github.com/bluespace3/bluespace3.github.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;已关联远程仓库：&lt;/span>&lt;span class="nv">$REMOTE_URL&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 推送到GitHub&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -u origin main --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>终端运行 ..command.sh&lt;/li>
&lt;/ol>
&lt;h2 id="更新维护">更新维护&lt;/h2>
&lt;p>后期维护有许多要留意的地方否则容易踩坑。&lt;/p></description></item><item><title>linux安装python</title><link>https://bluespace3.github.io/post/linux%E5%AE%89%E8%A3%85python/</link><pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/linux%E5%AE%89%E8%A3%85python/</guid><description>&lt;p>#依赖包&lt;/p>
&lt;p>yum -y groupinstall &amp;ldquo;Development tools&amp;rdquo;&lt;/p>
&lt;p>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel&lt;/p>
&lt;p>#下载 Python3&lt;/p>
&lt;p>wget &lt;a href="https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz">https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz&lt;/a>&lt;/p>
&lt;p>#创建文件夹&lt;/p>
&lt;p>mkdir /usr/local/python3&lt;/p>
&lt;p>#解压编译安装&lt;/p>
&lt;p>tar -xvJf Python-3.6.2.tar.xz&lt;/p>
&lt;p>cd Python-3.6.2&lt;/p>
&lt;p>./configure &amp;ndash;prefix=/usr/local/python3&lt;/p>
&lt;p>make &amp;amp;&amp;amp; make install&lt;/p>
&lt;p>#给个软链&lt;/p>
&lt;p>ln -sf /usr/local/python3/bin/python3 /usr/bin/python3&lt;/p>
&lt;p>ln -sf /usr/local/python3/bin/pip3 /usr/bin/pip3&lt;/p></description></item><item><title>python常见踩坑记录</title><link>https://bluespace3.github.io/post/python%E9%9D%9E%E5%90%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%B0%83%E7%94%A8%E6%8A%A5%E9%94%99/</link><pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/python%E9%9D%9E%E5%90%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%B0%83%E7%94%A8%E6%8A%A5%E9%94%99/</guid><description>&lt;h2 id="项目结构">项目结构：&lt;/h2>
&lt;p>&lt;img src="https://guangpuyun.feishu.cn/space/api/box/stream/download/asynccode/?code=N2E4ZjQ0N2I5MmEwYWExMjg1YmVmOTcyZTBhNTk1ZTlfdXlaSzZjU09wSE5mR1AyYTBuYVg1SElQcHJIUENSVWpfVG9rZW46S3AyMmI4bFN1b2VjeG54V251Q2NzMHBhbm5nXzE3NDI0NjExMTk6MTc0MjQ2NDcxOV9WNA" alt="">&lt;/p>
&lt;h2 id="问题">问题：&lt;/h2>
&lt;p>执行文件调用dir1，间接调用dir2。执行时报错：“ModuleNotFoundError: No module named &amp;lsquo;dir1.dir2&amp;rsquo;;”&lt;/p>
&lt;h2 id="解决方法">解决方法：&lt;/h2>
&lt;p>dir1文件导包时做处理。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>主函数加入这四行，将项目的根目录(webapp)的路径加入到系统PATH中；
import os,sys&lt;/p>
&lt;p>from pathlib import Path&lt;/p>
&lt;p>sys.path[0] = str(Path(sys.path[0]).parent.parent)&lt;/p>
&lt;p>sys.path.append(os.getcwd())&lt;/p>
&lt;/li>
&lt;li>
&lt;p>且导包从项目执行入口文件同级开始写&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://guangpuyun.feishu.cn/space/api/box/stream/download/asynccode/?code=MzlhZjJjZjgzNzk4YjdjNzU2ZWQ1ZDdjMjA5ODI0MDZfTzN2ZmlQOVM0a1BERU95VkY1amZ5bTFXMEJsc09pTExfVG9rZW46UlgyTmJCdHdLb0I5Z2d4VktJcmNEbDNvblljXzE3NDI0NjExMTk6MTc0MjQ2NDcxOV9WNA" alt="">&lt;/p></description></item><item><title>python的os模块使用</title><link>https://bluespace3.github.io/post/python%E4%B8%AD%E7%9A%84os%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</link><pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/python%E4%B8%AD%E7%9A%84os%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</guid><description>&lt;ul>
&lt;li>os.listdir(path)
获取文件夹下全部文件，的列表&lt;/li>
&lt;li>os.path.join(path1,path2)
将路径path1和路径path2拼接成新的路径，path1//path2&lt;/li>
&lt;li>base_dir = os.path.dirname(os.path.abspath(&lt;strong>file&lt;/strong>))
获取当前文件的绝对路径&lt;/li>
&lt;li>input_file = os.path.join(base_dir, &lt;strong>&amp;quot;../resource/swaggerApi/clinic-ysb-app_OpenAPI.json&amp;quot;&lt;/strong>)&lt;/li>
&lt;/ul></description></item><item><title>scrapy爬柚子网示例</title><link>https://bluespace3.github.io/post/scrapy%E7%88%AC%E6%9F%9A%E5%AD%90%E7%BD%91%E7%A4%BA%E4%BE%8B/</link><pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/scrapy%E7%88%AC%E6%9F%9A%E5%AD%90%E7%BD%91%E7%A4%BA%E4%BE%8B/</guid><description>&lt;p>柚子网https://www.uu-zz.com/&lt;/p>
&lt;p>爬取页码&lt;/p>
&lt;p>遍历页面内对应的视频集的链接&lt;/p>
&lt;p>&lt;img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/O1YCbvbQBoiZYHxxbO7cqOi6nKb?preview_type=16" alt="">&lt;/p>
&lt;p>遍历视频内子视频链接&lt;/p>
&lt;p>&lt;img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/CKMPbtR4souEnDxWowNcxAuenNc?preview_type=16" alt="">!&lt;/p>
&lt;p>&lt;a href="https://security.feishu.cn/link/safety?target=https%3A%2F%2Fwww.uu-zz.com%2F%2B%E5%AD%90%E8%A7%86%E9%A2%91%E9%93%BE%E6%8E%A5&amp;amp;scene=ccm&amp;amp;logParams=%7B%22location%22%3A%22ccm_mindnote%22%7D&amp;amp;lang=zh-CN">https://www.uu-zz.com/+子视频链接&lt;/a>，发送get请求&lt;/p>
&lt;p>&lt;img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/ClLDbx3s5o29xpxWKrncnG3Enzg?preview_type=16" alt="">!&lt;/p>
&lt;p>获得m3u8文件，储存在数据库&lt;/p></description></item><item><title>unnitest</title><link>https://bluespace3.github.io/post/unnitest%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/unnitest%E7%AC%94%E8%AE%B0/</guid><description>&lt;ul>
&lt;li>一、引入
&lt;ul>
&lt;li>1.导包，import unnitest&lt;/li>
&lt;li>2.编写测试类，继承unnitest&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>二、运行
&lt;ul>
&lt;li>
&lt;p>1.unnitest.main(),运行全部用例&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2.测试套：testsuite&lt;/p>
&lt;ul>
&lt;li>
&lt;p>创建：suite=unnitest.Testsuite()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>测试套添加用例：suite.addtTest（类（方法））&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="images/1742460595596.png" alt="1742460595596">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行：runner=unnitest.TextTestRunner()&lt;/p>
&lt;ul>
&lt;li>运行：runner.run(suite)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>*运行必须在命令行运行否则是运行全部用例&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>三、生成报告&lt;/p>
&lt;p>&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460643666.png" alt="1742460643666">&lt;/p>
&lt;ul>
&lt;li>1.将HTMLTestRunner.py文件放到项目文件夹下&lt;/li>
&lt;li>2.导包：如左图&lt;/li>
&lt;li>3.创建测试套，参考上方&lt;/li>
&lt;li>4.创建测试报告文件，且以测试套运行（参考左图）&lt;/li>
&lt;li>&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460677985.png" alt="1742460677985">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>与pytest的异同&lt;/li>
&lt;li>&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460760547.png" alt="1742460760547">
&lt;ul>
&lt;li>pytest以mark方式组织用例（而非套件）&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460791823.png" alt="1742460791823">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>面试相关&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460820437.png" alt="1742460820437">&lt;/li>
&lt;li>pycharm关闭pytest测试模式&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460849632.png" alt="1742460849632">&lt;/li>
&lt;/ul></description></item></channel></rss>