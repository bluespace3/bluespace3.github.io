<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/css/xml-style.css" type="text/css"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 蓝色空间号-新世界的探索者</title><link>https://bluespace3.github.io/</link><description>Recent content in Posts on 蓝色空间号-新世界的探索者</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 05 Sep 2025 23:55:00 +0000</lastBuildDate><atom:link href="https://bluespace3.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>AI量化交易决策系统方案</title><link>https://bluespace3.github.io/post/%E9%87%8F%E5%8C%96%E9%A1%B9%E7%9B%AE/ai%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%86%B3%E7%AD%96%E7%B3%BB%E7%BB%9F%E6%96%B9%E6%A1%88/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E9%87%8F%E5%8C%96%E9%A1%B9%E7%9B%AE/ai%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%86%B3%E7%AD%96%E7%B3%BB%E7%BB%9F%E6%96%B9%E6%A1%88/</guid><description>&lt;h2 id="-2025-07-13-近期优化与变更"&gt;📝 2025-07-13 近期优化与变更&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新增布林带、KDJ、成交量、ATR、威廉指标，技术指标体系更丰富。&lt;/li&gt;
&lt;li&gt;评分体系优化：技术面40分、基本面35分、情绪面25分，ETF与A股评分规则分离，ETF基本面恒为0，ETF评分=技术面50分+AI消息面50分。&lt;/li&gt;
&lt;li&gt;决策等级优化：5级决策（重仓买入、买入、持有、谨慎持有、卖出），买入阈值降至50分，持有30分，谨慎持有10分，卖出&amp;lt;10分。&lt;/li&gt;
&lt;li&gt;日志与邮件去重：每只股票仅保留最新信号，输出和报告更简明。&lt;/li&gt;
&lt;li&gt;自动邮件集成：主程序运行后自动发送HTML格式决策报告，内容美化，信号带emoji和中文名。&lt;/li&gt;
&lt;li&gt;数据兼容性增强：分析引擎支持成交量列名为vol或volume。&lt;/li&gt;
&lt;li&gt;AI分析优化：ETF和A股分开提示，ETF基本面恒为0，AI消息面更关注资金流和行业新闻。&lt;/li&gt;
&lt;li&gt;文档完善：补充README、部署、API、策略等文档，详细说明系统架构、评分体系、部署与接口。&lt;/li&gt;
&lt;li&gt;用户体验提升：聚合报告美化，策略可读性提升，项目说明更精炼。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文档详细阐述了本量化交易系统的核心决策逻辑。系统通过对技术面、基本面和AI市场情绪面三个维度进行独立的量化评分，最终加权汇总，生成交易信号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总分 = 技术面得分 + 基本面得分 + AI市场情绪面得分&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重仓买入阈值&lt;/strong&gt;: 总分 &amp;gt;= 80&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;买入阈值&lt;/strong&gt;: 总分 &amp;gt;= 60&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持有阈值&lt;/strong&gt;: 总分 &amp;gt;= 20&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨慎持有阈值&lt;/strong&gt;: 总分 &amp;gt;= -10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;卖出阈值&lt;/strong&gt;: 总分 &amp;lt; -10&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="etf评分体系指数基金etf专用"&gt;ETF评分体系（指数基金/ETF专用）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术面&lt;/strong&gt;：50分（均线、成交量、波动率等为主，弱化KDJ等短线指标）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI消息面&lt;/strong&gt;：50分（重点关注资金流向、申购赎回、行业轮动、指数调整等）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基本面&lt;/strong&gt;：恒为0分（ETF不参与基本面打分）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总分 = 技术面得分（归一化到50分） + AI消息面得分（归一化到50分）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;归一化方法：技术面原始得分/40×50，AI消息面原始得分/25×50，四舍五入取整。&lt;/li&gt;
&lt;li&gt;ETF决策流程与A股一致，但分数分布和信号解释更侧重资金流和行业轮动。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="一-技术面分析-总权重-40分"&gt;一、 技术面分析 (总权重: 40分)&lt;/h2&gt;
&lt;p&gt;技术面分析旨在捕捉市场的短期趋势和动量。它由四个核心指标构成，各自有独立的评分和权重。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;指标&lt;/th&gt;
&lt;th style="text-align: left"&gt;权重&lt;/th&gt;
&lt;th style="text-align: left"&gt;触发条件&lt;/th&gt;
&lt;th style="text-align: left"&gt;得分&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;MACD趋势&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;15分&lt;/td&gt;
&lt;td style="text-align: left"&gt;看涨金叉 (DIF上穿DEA，且DIF&amp;gt;0)&lt;/td&gt;
&lt;td style="text-align: left"&gt;+15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;看跌死叉 (DIF下穿DEA，且DIF&amp;lt;0)&lt;/td&gt;
&lt;td style="text-align: left"&gt;-15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;多头排列 (DIF&amp;gt;DEA)&lt;/td&gt;
&lt;td style="text-align: left"&gt;+8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;空头排列 (DIF&amp;lt;DEA)&lt;/td&gt;
&lt;td style="text-align: left"&gt;-8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;RSI动量&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;10分&lt;/td&gt;
&lt;td style="text-align: left"&gt;RSI &amp;lt; 30 (超卖区)&lt;/td&gt;
&lt;td style="text-align: left"&gt;+10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;RSI &amp;gt; 70 (超买区)&lt;/td&gt;
&lt;td style="text-align: left"&gt;-10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;RSI &amp;lt; 40 (偏弱)&lt;/td&gt;
&lt;td style="text-align: left"&gt;+5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;RSI &amp;gt; 60 (偏强)&lt;/td&gt;
&lt;td style="text-align: left"&gt;-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;布林带&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;8分&lt;/td&gt;
&lt;td style="text-align: left"&gt;价格触及下轨&lt;/td&gt;
&lt;td style="text-align: left"&gt;+8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;价格触及上轨&lt;/td&gt;
&lt;td style="text-align: left"&gt;-8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;价格在中轨下方&lt;/td&gt;
&lt;td style="text-align: left"&gt;+3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;价格在中轨上方&lt;/td&gt;
&lt;td style="text-align: left"&gt;-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;strong&gt;KDJ指标&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;7分&lt;/td&gt;
&lt;td style="text-align: left"&gt;KDJ超卖 (K&amp;lt;20, D&amp;lt;20)&lt;/td&gt;
&lt;td style="text-align: left"&gt;+7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;KDJ超买 (K&amp;gt;80, D&amp;gt;80)&lt;/td&gt;
&lt;td style="text-align: left"&gt;-7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;KDJ金叉 (K&amp;gt;D)&lt;/td&gt;
&lt;td style="text-align: left"&gt;+3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;KDJ死叉 (K&amp;lt;D)&lt;/td&gt;
&lt;td style="text-align: left"&gt;-3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;最终报告形式&lt;/strong&gt;: &lt;code&gt;技术面得分: [总分] | 原因: [综合原因] (MACD: [得分], RSI: [得分], 布林带: [得分], KDJ: [得分])&lt;/code&gt;&lt;/p&gt;</description></item><item><title>AI量化交易决策系统技术文档</title><link>https://bluespace3.github.io/post/%E9%87%8F%E5%8C%96%E9%A1%B9%E7%9B%AE/ai%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%86%B3%E7%AD%96%E7%B3%BB%E7%BB%9F%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E9%87%8F%E5%8C%96%E9%A1%B9%E7%9B%AE/ai%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%86%B3%E7%AD%96%E7%B3%BB%E7%BB%9F%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</guid><description>&lt;h2 id="-2025-07-13-近期优化与变更"&gt;📝 2025-07-13 近期优化与变更&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;API支持ETF与A股评分体系分离，ETF基本面恒为0，ETF评分=技术面50分+AI消息面50分。&lt;/li&gt;
&lt;li&gt;评分体系与决策等级优化，买入阈值降至50分，持有30分，谨慎持有10分，卖出&amp;lt;10分。&lt;/li&gt;
&lt;li&gt;日志与邮件内容去重，每只股票仅保留最新信号。&lt;/li&gt;
&lt;li&gt;集成自动邮件功能，主程序运行后自动发送HTML决策报告。&lt;/li&gt;
&lt;li&gt;数据兼容性增强，分析引擎支持成交量列名为vol或volume。&lt;/li&gt;
&lt;li&gt;文档补充与完善，详细说明系统架构、评分体系、部署与接口。&lt;/li&gt;
&lt;li&gt;用户体验提升，聚合报告美化，策略可读性提升。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-概述"&gt;📋 概述&lt;/h2&gt;
&lt;p&gt;本文档详细说明了量化交易系统的各个模块、类、方法和接口，为开发者提供完整的API参考。&lt;/p&gt;
&lt;h2 id="-系统架构"&gt;🏗️ 系统架构&lt;/h2&gt;
&lt;h3 id="核心模块"&gt;核心模块&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-gdscript3" data-lang="gdscript3"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# 配置管理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;data_loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# 数据加载器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;analysis_engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# 分析引擎&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;strategy_engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# 策略引擎&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;gemini_analyzer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# AI分析器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="-配置模块-configpy"&gt;📊 配置模块 (config.py)&lt;/h2&gt;
&lt;h3 id="类和方法"&gt;类和方法&lt;/h3&gt;
&lt;h4 id="配置常量"&gt;配置常量&lt;/h4&gt;
&lt;h1 id="股票池配置"&gt;股票池配置&lt;/h1&gt;
&lt;p&gt;STOCK_POOL = {
&amp;ldquo;000001.SZ&amp;rdquo;: &amp;ldquo;平安银行&amp;rdquo;,
&amp;ldquo;600519.SH&amp;rdquo;: &amp;ldquo;贵州茅台&amp;rdquo;,
# &amp;hellip;
}&lt;/p&gt;
&lt;h1 id="api配置"&gt;API配置&lt;/h1&gt;
&lt;p&gt;GEMINI_API_URL = &amp;ldquo;&lt;a href="https://rglnawodplak.ap-southeast-1.clawcloudrun.com/"&gt;https://rglnawodplak.ap-southeast-1.clawcloudrun.com/&lt;/a&gt;****&lt;em&gt;&lt;strong&gt;t/completions&amp;rdquo;
GEMINI_API_KEY = &amp;ldquo;&lt;/strong&gt;&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;h1 id="数据路径"&gt;数据路径&lt;/h1&gt;
&lt;p&gt;DATA_PATH = &amp;ldquo;data&amp;rdquo;&lt;/p&gt;
&lt;h2 id="-数据加载器-data_loaderpy"&gt;📈 数据加载器 (data_loader.py)&lt;/h2&gt;
&lt;h3 id="dataloader-类"&gt;DataLoader 类&lt;/h3&gt;
&lt;h4 id="方法"&gt;方法&lt;/h4&gt;
&lt;h5 id="__init__self"&gt;&lt;code&gt;__init__(self)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;初始化数据加载器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;: 无
&lt;strong&gt;返回&lt;/strong&gt;: 无&lt;/p&gt;
&lt;h5 id="run_updateself-days_to_fetch-int--365"&gt;&lt;code&gt;run_update(self, days_to_fetch: int = 365)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;更新所有股票的最新数据。&lt;/p&gt;</description></item><item><title>Git submodule</title><link>https://bluespace3.github.io/post/git/git-submodule/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/git/git-submodule/</guid><description>&lt;hr&gt;
&lt;p&gt;title: &amp;ldquo;Git submodule&amp;rdquo;&lt;/p&gt;
&lt;p&gt;categories: [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;git&amp;rdquo;, &amp;ldquo;hugo&amp;rdquo;]&lt;/p&gt;
&lt;p&gt;date: 2025-03-20T12:59:32+08:00&lt;/p&gt;
&lt;p&gt;draft: false&lt;/p&gt;
&lt;h2 id="tags-submodule-git-教程"&gt;tags: [&amp;ldquo;submodule&amp;rdquo;, &amp;ldquo;Git&amp;rdquo;, &amp;ldquo;教程&amp;rdquo;]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://guangpuyun.feishu.cn/docx/J6CDd7QvkohJ3mxEKt3czp31nOe#J6CDd7QvkohJ3mxEKt3czp31nOe"&gt;Git submodule添加子项目_库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guangpuyun.feishu.cn/docx/J6CDd7QvkohJ3mxEKt3czp31nOe#doxcnEitqaRgfOoIdSuxwNhUaIc"&gt;Git归并策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guangpuyun.feishu.cn/docx/J6CDd7QvkohJ3mxEKt3czp31nOe#doxcnel4BHYYT4Lw7SQHLqNXyue"&gt;添加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guangpuyun.feishu.cn/docx/J6CDd7QvkohJ3mxEKt3czp31nOe#doxcnrHxc9hpZYK1WtRbYlUQ91f"&gt;删除&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入“/”快速插入内容&lt;/p&gt;
&lt;p&gt;添加图标&lt;/p&gt;
&lt;p&gt;添加封面&lt;/p&gt;
&lt;p&gt;展示文档信息&lt;/p&gt;
&lt;p&gt;Git submodule添加子项目_库&lt;/p&gt;
&lt;p&gt;开发过程中，经常会有一些通用的部分希望抽取出来做成一个公共库来提供给别的工程来使用，而公共代码库的版本管理是个麻烦的事情。git submodule命令就可以解决这个问题。&lt;/p&gt;
&lt;p&gt;Git归并策略&lt;/p&gt;
&lt;p&gt;Git归并有两种策略：递归，章鱼。&lt;/p&gt;
&lt;p&gt;1.递归策略：当分支数只有两个的时候。&lt;/p&gt;
&lt;p&gt;2.章鱼策略：当分支数大于两个的时候。&lt;/p&gt;
&lt;p&gt;Git会自动选择归并的方法。&lt;/p&gt;
&lt;p&gt;3.子树策略：是Git另一种归并方法。（submodule）&lt;/p&gt;
&lt;p&gt;它可以把另一个子项目，嵌入到当前项目。而且会非常聪明的合并这些子项目。&lt;/p&gt;
&lt;p&gt;添加&lt;/p&gt;
&lt;p&gt;为当前工程添加submodule，命令如下：&lt;/p&gt;
&lt;p&gt;git submodule add 仓库地址 路径&lt;/p&gt;
&lt;p&gt;其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。&lt;/p&gt;
&lt;p&gt;注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;git submodule add -f &lt;a href="http://git.cs/Cmblife_iOS_Internal/modulesLib.git"&gt;http://git.cs/Cmblife_iOS_Internal/modulesLib.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-f 是强制的意思，一般不需要加&lt;/p&gt;
&lt;p&gt;命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。&lt;/p&gt;
&lt;p&gt;删除&lt;/p&gt;
&lt;p&gt;submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。&lt;/p&gt;
&lt;p&gt;下载的工程带有submodule&lt;/p&gt;
&lt;p&gt;当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：&lt;/p&gt;
&lt;p&gt;git submodule update –init –recursive&lt;/p&gt;
&lt;p&gt;即可将子模块内容下载下来后工程才不会缺少相应的文件。&lt;/p&gt;</description></item><item><title>gitlab配置cicd工作流</title><link>https://bluespace3.github.io/post/git/gitlab%E9%85%8D%E7%BD%AEcicd%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/git/gitlab%E9%85%8D%E7%BD%AEcicd%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>&lt;h2 id="gitlab-cicd-简介"&gt;GitLab CI/CD 简介&lt;/h2&gt;
&lt;p&gt;GitLab CI/CD 是 GitLab 内置的持续集成/持续部署工具，它允许开发者在代码提交后自动执行一系列任务，如构建、测试和部署。通过配置 CI/CD 流程，可以大大提高开发效率，减少人为错误，并确保代码质量。&lt;/p&gt;
&lt;h3 id="cicd-核心概念"&gt;CI/CD 核心概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;持续集成 (CI)&lt;/strong&gt;: 开发人员频繁地将代码集成到主分支，每次集成都通过自动化构建和测试来验证，从而尽早发现问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续交付 (CD)&lt;/strong&gt;: 确保代码随时可以部署到生产环境，通常包括自动化测试和部署流程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续部署 (CD)&lt;/strong&gt;: 将持续交付更进一步，自动将通过测试的代码部署到生产环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gitlab-ciyml-配置文件"&gt;.gitlab-ci.yml 配置文件&lt;/h2&gt;
&lt;p&gt;GitLab CI/CD 的核心是 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 文件，它定义了 CI/CD 流水线的结构和行为。该文件需要放在项目的根目录下。&lt;/p&gt;
&lt;h3 id="基本结构"&gt;基本结构&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 定义阶段&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;build&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;test&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;deploy&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c"&gt;# 定义作业&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;build_job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;build&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;echo &amp;#34;Building the app&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;make build&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;test_job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;test&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;echo &amp;#34;Running tests&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;make test&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;deploy_job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;deploy&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;echo &amp;#34;Deploying the app&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;make deploy&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="l"&gt;master&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="关键组件"&gt;关键组件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;stages&lt;/strong&gt;: 定义流水线的阶段，按顺序执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jobs&lt;/strong&gt;: 定义在特定阶段执行的任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;script&lt;/strong&gt;: 在作业中执行的命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;only/except&lt;/strong&gt;: 控制作业何时运行（例如，只在特定分支上运行）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="gitlab-runner"&gt;GitLab Runner&lt;/h2&gt;
&lt;p&gt;GitLab Runner 是执行 CI/CD 作业的代理，它可以安装在不同的环境中，如 Linux、Windows、macOS 等。&lt;/p&gt;</description></item><item><title>git操作</title><link>https://bluespace3.github.io/post/git/git%E6%93%8D%E4%BD%9C/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/git/git%E6%93%8D%E4%BD%9C/</guid><description>&lt;h4 id="回滚到指定提交"&gt;回滚到指定提交&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;git reset &amp;ndash;hard c1ac53850b0314a20e97f669bafc8bb67a3a1124&lt;/li&gt;
&lt;li&gt;git push&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="放弃变更强制提交"&gt;放弃变更强制提交&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;git reset &amp;ndash;hard ; git pull &amp;ndash;force&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="子模块的使用"&gt;子模块的使用&lt;/h4&gt;
&lt;p&gt;&lt;img src="https://bluespace3.github.io/images/361743670309_.pic.jpg" alt="子模块使用"&gt;&lt;/p&gt;</description></item><item><title>git添加子项目</title><link>https://bluespace3.github.io/post/git/git%E6%B7%BB%E5%8A%A0%E5%AD%90%E9%A1%B9%E7%9B%AE/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/git/git%E6%B7%BB%E5%8A%A0%E5%AD%90%E9%A1%B9%E7%9B%AE/</guid><description>&lt;ul&gt;
&lt;li&gt;项目中添加子项目
&lt;ul&gt;
&lt;li&gt;1、git clone 父项目url&lt;/li&gt;
&lt;li&gt;2、cd 父项目对应目录下：git submodule add &amp;lt;子项目地址&amp;gt;&lt;/li&gt;
&lt;li&gt;3、git commit ;git push&lt;/li&gt;
&lt;li&gt;4、此时子项目下的子项目是空的，需要cd到父目录cmd执行：
git submodule update &amp;ndash;init &amp;ndash;recursive
或者执行：git submodule init 然后执行cd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;clone含嵌套项目的项目
&lt;ul&gt;
&lt;li&gt;git clone 父项目url &amp;ndash;recurse-submodules
不加&amp;ndash;recurse-submodules，克隆的子项目是空的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>mcp-intro</title><link>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mcp-intro/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mcp-intro/</guid><description>&lt;h2 id="什么是mcp"&gt;什么是MCP？&lt;/h2&gt;
&lt;p&gt;MCP（Model Context Protocol）是一种用于扩展和增强开发工具功能的协议。它允许开发者创建和使用MCP服务器，这些服务器可以提供额外的工具和资源，以提高开发效率和灵活性。&lt;/p&gt;
&lt;h2 id="mcp的安装"&gt;MCP的安装&lt;/h2&gt;
&lt;p&gt;MCP的安装通常包括以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装MCP客户端：根据使用的开发工具，安装相应的MCP客户端插件或扩展。&lt;/li&gt;
&lt;li&gt;创建MCP服务器：使用提供的工具或模板创建一个新的MCP服务器项目。&lt;/li&gt;
&lt;li&gt;配置MCP服务器：在MCP服务器项目中添加所需的工具和资源，并进行相应的配置。&lt;/li&gt;
&lt;li&gt;运行MCP服务器：启动MCP服务器，使其与MCP客户端进行通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="使用示例"&gt;使用示例&lt;/h2&gt;
&lt;p&gt;以下是一个简单的MCP服务器使用示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;/usr/bin/env node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@modelcontextprotocol/sdk/server/index.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StdioServerTransport&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@modelcontextprotocol/sdk/server/stdio.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example-mcp-server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;capabilities&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;exampleTool&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;这是一个示例工具&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;inputSchema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;要显示的消息&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exampleTool&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sb"&gt;`您输入的消息是：&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;StdioServerTransport&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MCP服务器正在运行&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="热门mcp工具推荐"&gt;热门MCP工具推荐&lt;/h2&gt;
&lt;p&gt;以下是一些目前热门的MCP工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码生成工具&lt;/strong&gt;：根据项目需求自动生成代码模板和结构，提高开发效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API文档生成工具&lt;/strong&gt;：自动从代码中提取API信息并生成详细的文档，方便团队成员查阅。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码质量检查工具&lt;/strong&gt;：对代码进行静态分析，检查潜在的错误和问题，提高代码质量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动化测试工具&lt;/strong&gt;：自动生成和执行测试用例，确保代码的正确性和稳定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过使用这些热门MCP工具，开发者可以大大提高开发效率和代码质量，更好地完成项目开发任务。&lt;/p&gt;
&lt;h2 id="总结"&gt;总结&lt;/h2&gt;
&lt;p&gt;MCP是一种强大的开发工具扩展协议，可以帮助开发者创建和使用各种工具和资源。通过本指南，您已经了解了MCP的基本使用方法，接下来可以探索更多高级功能和热门工具。&lt;/p&gt;</description></item><item><title>playwright的python文档</title><link>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/playwright%E7%9A%84python%E6%96%87%E6%A1%A3/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/playwright%E7%9A%84python%E6%96%87%E6%A1%A3/</guid><description>&lt;h1 id="安装"&gt;安装&lt;/h1&gt;
&lt;h2 id="引言"&gt;引言&lt;/h2&gt;
&lt;p&gt;Playwright 是专门为满足端到端测试的需求而创建的。Playwright 支持包括 Chromium、WebKit 和 Firefox 在内的所有现代渲染引擎。在 Windows、Linux 和 macOS 上进行测试，无论是本地还是在 CI 上，无论是无头模式还是有头模式，都可以使用原生移动设备仿真。&lt;/p&gt;
&lt;p&gt;Playwright 库可以用作通用的浏览器自动化工具，为同步和异步 Python 提供了一套强大的 API 来自动化 Web 应用程序。&lt;/p&gt;
&lt;p&gt;本介绍描述了 Playwright Pytest 插件，这是编写端到端测试的推荐方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你将学到&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何安装 Playwright Pytest&lt;/li&gt;
&lt;li&gt;如何运行示例测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="安装-playwright-pytest"&gt;安装 Playwright Pytest&lt;/h2&gt;
&lt;p&gt;Playwright 建议使用官方的 Playwright Pytest 插件来编写端到端测试。它提供了上下文隔离，并开箱即用地在多个浏览器配置上运行。&lt;/p&gt;
&lt;p&gt;首先，通过安装 Playwright 并运行示例测试来开始，亲眼看看它是如何工作的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyPI&lt;/li&gt;
&lt;li&gt;Anaconda&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装所需的浏览器：&lt;/p&gt;
&lt;h2 id="添加示例测试"&gt;添加示例测试&lt;/h2&gt;
&lt;p&gt;在当前工作目录或遵循 &lt;code&gt;test_&lt;/code&gt; 前缀约定的子目录中创建一个文件，例如 &lt;code&gt;test_example.py&lt;/code&gt;，并在其中包含以下代码。确保你的测试名称也遵循 &lt;code&gt;test_&lt;/code&gt; 前缀约定。&lt;/p&gt;
&lt;p&gt;test_example.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-Python" data-lang="Python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;playwright.sync_api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_has_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;https://playwright.dev/&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 期望标题“包含”一个子字符串。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_have_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Playwright&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_started_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;https://playwright.dev/&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 点击“开始”链接。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_by_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Get started&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 期望页面有一个名为“安装”的标题。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_by_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;heading&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Installation&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_be_visible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="运行示例测试"&gt;运行示例测试&lt;/h2&gt;
&lt;p&gt;默认情况下，测试将在 Chromium 上运行。这可以通过 CLI 选项进行配置。测试以无头模式运行，这意味着在运行测试时不会打开浏览器 UI。测试结果和测试日志将在终端中显示。&lt;/p&gt;</description></item><item><title>pytest-intro</title><link>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/pytest-intro/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/pytest-intro/</guid><description>&lt;h2 id="什么是pytest"&gt;什么是pytest？&lt;/h2&gt;
&lt;p&gt;pytest是一个功能强大且易于使用的Python测试框架。它可以帮助开发者编写简洁、可读性强的测试代码，并提供丰富的插件支持。&lt;/p&gt;
&lt;h2 id="pytest的主要特点"&gt;pytest的主要特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;简洁的测试用例编写方式&lt;/li&gt;
&lt;li&gt;自动发现测试用例&lt;/li&gt;
&lt;li&gt;支持参数化测试&lt;/li&gt;
&lt;li&gt;强大的断言功能&lt;/li&gt;
&lt;li&gt;丰富的插件生态系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="安装pytest"&gt;安装pytest&lt;/h2&gt;
&lt;p&gt;使用以下命令安装pytest：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;pip install pytest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="编写测试用例"&gt;编写测试用例&lt;/h2&gt;
&lt;p&gt;一个简单的pytest测试用例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_addition&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_subtraction&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="运行测试"&gt;运行测试&lt;/h2&gt;
&lt;p&gt;使用以下命令运行pytest测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;pytest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="参数化测试"&gt;参数化测试&lt;/h2&gt;
&lt;p&gt;pytest支持参数化测试，可以使用&lt;code&gt;@pytest.mark.parametrize&lt;/code&gt;装饰器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;test_input,expected&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;3+5&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;2+4&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;6*9&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="总结"&gt;总结&lt;/h2&gt;
&lt;p&gt;pytest是一个功能强大且易于使用的Python测试框架，可以帮助开发者编写简洁、可读性强的测试代码。通过本指南，您已经了解了pytest的基本使用方法，接下来可以探索更多高级功能。&lt;/p&gt;</description></item><item><title>pytest接口自动化测试方案</title><link>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/pytest%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/pytest%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88/</guid><description>&lt;h2 id="背景"&gt;背景&lt;/h2&gt;
&lt;p&gt;当前业务核心聚焦于 POCT 领域，设备购买和设备使用等关键功能，已成为测试工作的重点保障对象，但随着系统复杂度的提升,手工的回归测试工作很难全面覆盖。为了确保关键业务功能的质量稳定性，有必要引入自动化测试，增加测试覆盖范围，降低已有功能漏测的风险，提前发现问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="目标"&gt;目标&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;短期目标：接入自动化测试（截至3月底）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前期准备工作
&lt;ul&gt;
&lt;li&gt;预研不同的自动化测试框架，结合中长期目标与现实情况及各个框架的优缺点选择一套合适的自动化框架
&lt;ul&gt;
&lt;li&gt;对比几款常见接口测试框架&lt;/li&gt;
&lt;li&gt;初步选定：pytest + Requests
&lt;ul&gt;
&lt;li&gt;语法简洁容易上手-接入成本低&lt;/li&gt;
&lt;li&gt;灵活，社区支持好，插件丰富-适合复杂测试场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;制定初步的方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动化项目方案
&lt;ul&gt;
&lt;li&gt;项目框架搭建&lt;/li&gt;
&lt;li&gt;确定实施方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试人员小范围接入自动化项目（跑通流程）
&lt;ul&gt;
&lt;li&gt;三月底能够将三款新设备正向检测流程转化为自动化测试脚本
&lt;ul&gt;
&lt;li&gt;**将慢病设备下单-上传检测结果流程；快速检测单流程接入接口自动化测试（正向检测流程）&lt;/li&gt;
&lt;li&gt;**将免疫、血球设备下单-上传检测结果（正向检测流程）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中期目标&lt;/strong&gt; ：&lt;strong&gt;自动化项目应用到测试工作流程（截至6月底）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;覆盖三款新设备装机到检测使用的全部场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;覆盖设备装机到检测过程中的各项操作步骤和关键节点，从设备初始化到实际检测，确保各环节功能正常，数据交互准确，为用户提供稳定可靠的设备使用体验（包括异常流程）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将自动化流程应用到测试工作流程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能有效增加测试覆盖率，减少漏测风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;脚本的维护流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在接口变更，需求功能更改后如何维护&lt;/li&gt;
&lt;li&gt;运行失败用例如何维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;长期目标：不断完善接口自动化，有效应用到研发测试工作流程（截至12月底）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;完善涉及用户相关的功能的自动化测试覆盖
&lt;ul&gt;
&lt;li&gt;对从商城购买到设备装机、检测、报告生成打印及检测后的慢病管理，全流程自动化测试，保障用户使用系统过程中的顺畅性，避免因流程问题导致的交易失败或用户体验不佳情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将自动化测试无缝应用到现有的研发测试工作流程中。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;替代大部分回归测试，提高测试效率，进一步减少漏测风险。&lt;/li&gt;
&lt;li&gt;自动化测试成为常态化测试手段,能提前发现问题,有效提升整体工作效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="自动化测试工具选型"&gt;&lt;strong&gt;自动化测试工具选型&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自动化测试框架-pytest + Requests
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;几款常见接口测试框架对比详情：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://bluespace3.github.io/images/pytest%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88/1743173315631.png" alt="1743173315631"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pytest + Requests&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法简洁容易上手-接入成本低&lt;/li&gt;
&lt;li&gt;灵活，社区支持好，插件丰富-适合复杂测试场景&lt;/li&gt;
&lt;li&gt;已有相关基础&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选型依据
　　兼容性、适合复杂流程交互（设备交互）、丰富的社区支持、接入成本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试管理工具（飞书或tapd）
&lt;ul&gt;
&lt;li&gt;自动化用例管理&lt;a href="https://guangpuyun.feishu.cn/base/XG9ZbshkeaG2NYsdUb5cOYaQnBg?from=from_copylink"&gt;接口自动化测试用例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CI/CD工具&lt;/li&gt;
&lt;li&gt;GitLab CI&lt;/li&gt;
&lt;li&gt;uvicorn+fastapi
&lt;ul&gt;
&lt;li&gt;部署+接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="自动化测试用例设计"&gt;&lt;strong&gt;自动化测试用例设计&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;用例分层设计
&lt;ol&gt;
&lt;li&gt;基础类（/api）
&lt;ul&gt;
&lt;li&gt;根据接口文档生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试用例（/tests）
&lt;ul&gt;
&lt;li&gt;基础功能用例（原子级-单个接口测试）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt; ：针对单个接口的独立测试，关注接口的输入输出正确性、异常处理能力及边界条件验证。例如，用户登录接口的独立测试需覆盖正常登录、密码错误、账号不存在等场景&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt; ：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原子性&lt;/strong&gt; ：每个用例仅验证一个接口的单一功能，不依赖其他接口或业务流程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高复用性&lt;/strong&gt; ：可作为其他复杂用例的构建单元，例如登录接口的测试结果可被后续业务流程用例复用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术实现&lt;/strong&gt; ：通常结合数据驱动设计（如参数化测试数据），通过多组输入数据覆盖等价类和边界值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;业务流程用例（端到端、涉及多个接口和流程的测试）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt; ：模拟真实用户操作路径，串联多个接口验证端到端业务逻辑。例如“创建商品→创建优惠券→创建活动→下单支付”的全流程测试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt; ：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;场景化&lt;/strong&gt; ：基于用户使用的功能场景设计，关注接口间的数据传递与状态流转。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险覆盖&lt;/strong&gt; ：重点验证流程中的关键节点（如订单状态变更、库存扣减）和异常分支（如支付超时回滚）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖管理&lt;/strong&gt; ：通过关键字驱动设计（如“获取Token”“查询订单状态”）复用基础功能用例，降低冗余代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试数据（/data）
&lt;ul&gt;
&lt;li&gt;存放测试数据&lt;/li&gt;
&lt;li&gt;提供测试数据的脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工具(/utils)
&lt;ul&gt;
&lt;li&gt;工具类集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据驱动设计&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　参数化测试数据（Excel、csv、数据库）&lt;/p&gt;</description></item><item><title>strategy</title><link>https://bluespace3.github.io/post/quant_trading/strategy/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/quant_trading/strategy/</guid><description>&lt;h1 id="量化交易策略知识库"&gt;量化交易策略知识库&lt;/h1&gt;
&lt;h2 id="核心策略"&gt;核心策略&lt;/h2&gt;
&lt;p&gt;本系统采用多因子综合评分策略，结合技术面、基本面和消息面分析。&lt;/p&gt;
&lt;h3 id="技术面分析指标"&gt;技术面分析指标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MACD指标：判断趋势转折点&lt;/li&gt;
&lt;li&gt;RSI指标：判断超买超卖状态&lt;/li&gt;
&lt;li&gt;KDJ指标：判断股价趋势&lt;/li&gt;
&lt;li&gt;布林带：判断价格波动区间&lt;/li&gt;
&lt;li&gt;成交量分析：确认价格变动的有效性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="基本面分析要素"&gt;基本面分析要素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;财务指标分析：盈利能力、偿债能力、运营能力&lt;/li&gt;
&lt;li&gt;行业地位评估：市场份额、竞争优势&lt;/li&gt;
&lt;li&gt;盈利能力评估：营收增长、利润增长&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="消息面分析方法"&gt;消息面分析方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新闻情感分析：判断市场情绪&lt;/li&gt;
&lt;li&gt;政策影响评估：分析政策对行业的影响&lt;/li&gt;
&lt;li&gt;市场情绪监控：跟踪市场热点和资金流向&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>SYSTEM_DESIGN</title><link>https://bluespace3.github.io/post/quant_trading/system_design/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/quant_trading/system_design/</guid><description>&lt;h1 id="系统设计与开发者文档"&gt;系统设计与开发者文档&lt;/h1&gt;
&lt;p&gt;本文档为量化交易系统的核心开发者提供全面的技术参考，涵盖了系统架构、核心模块、API接口、部署运维以及未来的发展规划。&lt;/p&gt;
&lt;h2 id="1-系统架构"&gt;1. 系统架构&lt;/h2&gt;
&lt;p&gt;本系统采用模块化设计，主要由数据层、分析层、策略层和应用层组成。&lt;/p&gt;
&lt;h3 id="11-核心模块"&gt;1.1. 核心模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.py&lt;/code&gt;: 自选股分析流程的入口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recommendation_system.py&lt;/code&gt;: AI智能推荐流程的入口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;health_check.py&lt;/code&gt;: Flask应用的入口，提供 &lt;code&gt;/health&lt;/code&gt; 和 &lt;code&gt;/run&lt;/code&gt; API端点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/&lt;/code&gt;: 包含所有核心逻辑的目录。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.py&lt;/code&gt;: 集中管理所有配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data_loader.py&lt;/code&gt; (&lt;code&gt;DataLoader&lt;/code&gt;): 负责从&lt;code&gt;akshare&lt;/code&gt;获取数据并存入数据库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.py&lt;/code&gt; (&lt;code&gt;DatabaseManager&lt;/code&gt;): 管理SQLite数据库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;analysis_engine.py&lt;/code&gt; (&lt;code&gt;AnalysisEngine&lt;/code&gt;): 负责计算技术指标。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gemini_analyzer.py&lt;/code&gt; (&lt;code&gt;GeminiAnalyzer&lt;/code&gt;): 与Gemini API交互，进行AI分析。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strategy_engine.py&lt;/code&gt; (&lt;code&gt;StrategyEngine&lt;/code&gt;): 核心策略模块，汇总分析并生成信号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;market_regime.py&lt;/code&gt; (&lt;code&gt;MarketRegime&lt;/code&gt;): 判断市场宏观状态（牛/熊/震荡）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logger.py&lt;/code&gt;: 提供统一的日志服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;send_email.py&lt;/code&gt;: 生成HTML邮件报告并发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="12-数据流"&gt;1.2. 数据流&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据获取&lt;/strong&gt;: &lt;code&gt;DataLoader&lt;/code&gt; 从 &lt;code&gt;akshare&lt;/code&gt; 获取数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储&lt;/strong&gt;: &lt;code&gt;DatabaseManager&lt;/code&gt; 将数据存入SQLite数据库 (&lt;code&gt;data/stock_data.db&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;市场状态判断&lt;/strong&gt;: &lt;code&gt;MarketRegime&lt;/code&gt; 分析市场指数，确定宏观环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术分析&lt;/strong&gt;: &lt;code&gt;AnalysisEngine&lt;/code&gt; 基于历史数据计算技术指标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI分析&lt;/strong&gt;: &lt;code&gt;GeminiAnalyzer&lt;/code&gt; 调用Gemini API获取基本面和消息面分析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略决策&lt;/strong&gt;: &lt;code&gt;StrategyEngine&lt;/code&gt; 结合所有分析结果，并根据市场状态动态调整权重，生成最终决策。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果输出&lt;/strong&gt;: 通过日志、邮件 (&lt;code&gt;send_email.py&lt;/code&gt;) 和API (&lt;code&gt;health_check.py&lt;/code&gt;) 输出。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="2-策略评分与决策体系-v3"&gt;2. 策略、评分与决策体系 (V3)&lt;/h2&gt;
&lt;p&gt;本量化交易系统的核心决策逻辑，通过对技术面、基本面和AI市场情绪面三个维度进行独立的量化评分，并结合&lt;strong&gt;市场状态动态加权&lt;/strong&gt;，最终生成交易信号。&lt;/p&gt;</description></item><item><title>test_knowledge_base</title><link>https://bluespace3.github.io/post/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%8C%AB%E5%92%AA/test_knowledge_base/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%8C%AB%E5%92%AA/test_knowledge_base/</guid><description>&lt;h1 id="这是一个测试知识库文件"&gt;这是一个测试知识库文件&lt;/h1&gt;
&lt;p&gt;这是一个关于人工智能的段落。人工智能是计算机科学的一个分支，旨在创建能够像人类一样思考和学习的智能机器。&lt;/p&gt;
&lt;p&gt;另一个关于机器学习的段落。机器学习是人工智能的一个子集，它使系统能够从数据中学习，而无需明确编程。山咪爱黏人。山咪名字的来源是为了纪念他的两个主人是登上认识的。山咪完成了两针疫苗，还没有绝育。&lt;/p&gt;</description></item><item><title>Transformer的工作原理</title><link>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/transformer%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/transformer%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid><description>&lt;p&gt;Transformer的工作原理&lt;/p&gt;
&lt;p&gt;拿到句子：从前有个国王，他有个女儿&lt;/p&gt;
&lt;p&gt;1.Token化：分词为得到token:从前|有个|国王|，|他|有个|女儿&lt;/p&gt;
&lt;p&gt;2.词嵌入、词向量：将每个token进行向量化（该token和其他对象的关联关系打分）-&amp;gt;转换成一堆数字,例如国王[0.9（权力）,0.8（城堡），0.7（严肃）&amp;hellip;.]，女儿[&amp;hellip;.]&lt;/p&gt;
&lt;p&gt;3.注意力机制：&lt;/p&gt;
&lt;p&gt;​ 编码器处理：分析问题用注意力划重点（如国王和女儿关系等）&lt;/p&gt;
&lt;p&gt;​ 解码器处理：边编故事边查表，用注意力确保连贯，生成内容。&lt;/p&gt;
&lt;p&gt;整体：进入计算-&amp;gt;注意力机制-&amp;gt;计算token与上下文的关系 ，据概率得到新词&lt;/p&gt;
&lt;p&gt;4.不断生成：再将新词进行上述计算，得到下一个新词。像玩文字无限接龙，每次参考所有历史信息，用注意力决定下一步重点。&lt;/p&gt;</description></item><item><title>unnitest笔记</title><link>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/unnitest%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/unnitest%E7%AC%94%E8%AE%B0/</guid><description>&lt;ul&gt;
&lt;li&gt;一、引入
&lt;ul&gt;
&lt;li&gt;1.导包，import unnitest&lt;/li&gt;
&lt;li&gt;2.编写测试类，继承unnitest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二、运行
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.unnitest.main(),运行全部用例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.测试套：testsuite&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建：suite=unnitest.Testsuite()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试套添加用例：suite.addtTest（类（方法））&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src="images/1742460595596.png" alt="1742460595596"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行：runner=unnitest.TextTestRunner()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行：runner.run(suite)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;*运行必须在命令行运行否则是运行全部用例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三、生成报告&lt;/p&gt;
&lt;p&gt;&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460643666.png" alt="1742460643666"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.将HTMLTestRunner.py文件放到项目文件夹下&lt;/li&gt;
&lt;li&gt;2.导包：如左图&lt;/li&gt;
&lt;li&gt;3.创建测试套，参考上方&lt;/li&gt;
&lt;li&gt;4.创建测试报告文件，且以测试套运行（参考左图）&lt;/li&gt;
&lt;li&gt;&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460677985.png" alt="1742460677985"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与pytest的异同&lt;/li&gt;
&lt;li&gt;&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460760547.png" alt="1742460760547"&gt;
&lt;ul&gt;
&lt;li&gt;pytest以mark方式组织用例（而非套件）&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460791823.png" alt="1742460791823"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面试相关&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460820437.png" alt="1742460820437"&gt;&lt;/li&gt;
&lt;li&gt;pycharm关闭pytest测试模式&lt;img src="image/unnitest%E7%AC%94%E8%AE%B0/1742460849632.png" alt="1742460849632"&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>测试平台分享</title><link>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%88%86%E4%BA%AB/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%88%86%E4%BA%AB/</guid><description>&lt;hr&gt;
&lt;p&gt;title: &amp;ldquo;测试平台教程&amp;rdquo;&lt;/p&gt;
&lt;p&gt;categories: [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;编程&amp;rdquo;, &amp;ldquo;git&amp;rdquo;]&lt;/p&gt;
&lt;p&gt;author: &amp;ldquo;tian&amp;rdquo;&lt;/p&gt;
&lt;p&gt;date: 2025-03-21T12:59:32+08:00&lt;/p&gt;
&lt;p&gt;draft: false&lt;/p&gt;
&lt;h2 id="tags-测试平台-静态网站-教程"&gt;tags: [&amp;ldquo;测试平台&amp;rdquo;, &amp;ldquo;静态网站&amp;rdquo;, &amp;ldquo;教程&amp;rdquo;]&lt;/h2&gt;
&lt;p&gt;一、基本介绍：（）
桌面端工具（一年左右），使用python的wxpython框架编写，使用pyinstaller打包为桌面exe文件；缺点：体积大，不便于分享；&lt;/p&gt;
&lt;p&gt;&lt;img src="./images/image_0fa5b6bdd33056f5c14c2ba21dca4298.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;web端应用（10月初至今）：flask+vue实现；优点，通过脚本实现热更新；链接形式便于分享。&lt;/p&gt;
&lt;p&gt;&lt;img src="./images/image_554bf84092b63f4dfeef955bec300c72.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;二、功能介绍：&lt;/p&gt;
&lt;p&gt;&lt;img src="./images/image_d8f9cc72d69a56ab872809e6e0c32ca7.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;三、技术实现&lt;/p&gt;
&lt;p&gt;测试平台采用前后端分离的方式实现:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后端由flask框架实现；
（1）flask项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="./images/image_08bf969bb5e6e6a6c2866b5ecd815b9a.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;（2）在项目入口文件中构建接口
Flask：用于创建一个flask应用,app = Flask(&lt;strong&gt;name&lt;/strong&gt;)
CORS:解决跨域问题，cors = CORS(app)
request:接受请求的参数，request.args.get()；phone = request.json[]
jsonify:以json格式返回结果：jsonify({&amp;ldquo;data&amp;rdquo;: res})
接口的基本组成：&lt;/p&gt;
&lt;p&gt;&lt;img src="./images/image_1e0619b874f00563f4df88a914e7b216.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;构建一个接口的基本步骤：
导包：Flask、CORS、request、jsonify
在app.route()装饰器中定义接口的请求类型、url路径
写一个接口函数
获取入参（可选）
get请求 request.args.get()
post请求 request.json[]
对得到的参数进行基本校验：如参数类型校验、字段长度、是否空、鉴权等。
根据传参进行逻辑处理，调用对应功能，得到结果
构建响应头（可选，返回类型是文件时必须）
构建结果，使用jsonify将返回结果构建成一个js （可选）
return结果
启动flask
app.run(ip,port,debug=True),其中debug=True代表以调试模式启动，代码改动后自动重启；debug默认为False。
包的管理 requirements.txt
代码中引入了的包，需要填写在该文件中，格式：“ 包名==版本号”&lt;/p&gt;
&lt;p&gt;&lt;img src="./images/image_ddafd5dad0788c85d978475b2b619b09.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;（3）采用gunnicorn+gevent部署flask项目
介绍：
一个HTTP 服务器，可以增加项目的并发，通常和gevent一起使用。
安装gunicorn和gevent：
pip install gunicorn -i &lt;a href="https://pypi.tuna.tsinghua.edu.cn/simple"&gt;https://pypi.tuna.tsinghua.edu.cn/simple&lt;/a&gt;
pip install gevent-i &lt;a href="https://pypi.tuna.tsinghua.edu.cn/simple"&gt;https://pypi.tuna.tsinghua.edu.cn/simple&lt;/a&gt;
配置文件 gunicorn.conf.py
workers = 10 定义同时开启的处理请求的进程数量，根据网站流量适当调整
worker_class = &amp;ldquo;gevent&amp;rdquo; 采用gevent库，支持异步处理请求，提高吞吐量
bind = &amp;ldquo;0.0.0.0:80&amp;rdquo; 监听IP放宽，以便于Docker之间、Docker和宿主机之间的通信,docker部署固定
采用启动服务：
gunicorn flask_index:app -c ./gunicorn.conf.py
注意：Gunicorn只能运行在Linux环境中，不支持windows平台，因此在windows调试的时候不要用这个方式启动flask；
2. 前端：vue 、node.js（前端的包管理工具，类似python的pip包管理工具）、vue-cli（vue项目的脚手架）、element-ui、echats提供页面交互;&lt;/p&gt;</description></item><item><title>大模型概述笔记</title><link>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B0%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p&gt;大模型概述笔记&lt;/p&gt;
&lt;p&gt;AGI:通用人工智能，能模拟人类抽象推理，因果理解等能力，解决未知环境的复杂问题，是人工智能的终极目标之一。大模型是AI发展的里程碑，也是实现AGI的重要步骤。&lt;/p&gt;</description></item><item><title>构建fastapi+vue项目dockerfile</title><link>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%9E%84%E5%BB%BAfastapi+vue%E9%A1%B9%E7%9B%AEdockerfile/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%9E%84%E5%BB%BAfastapi+vue%E9%A1%B9%E7%9B%AEdockerfile/</guid><description>&lt;h3 id="构建fastapi步骤"&gt;构建fastapi步骤&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-gdscript3" data-lang="gdscript3"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="n"&gt;fast_api项目下&lt;/span&gt;&lt;span class="err"&gt;，创建文件&lt;/span&gt;&lt;span class="n"&gt;gunicorn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;其内容如下：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;# 定义同时开启的处理请求的进程数量，根据网站流量适当调整&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;worker_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;gevent&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# 采用gevent库，支持异步处理请求，提高吞吐量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;0.0.0.0:80&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# 监听IP放宽，以便于Docker之间、Docker和宿主机之间的通信&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;python依赖存于项目requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt文件内&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="n"&gt;fast_api项目下&lt;/span&gt;&lt;span class="err"&gt;，构建&lt;/span&gt;&lt;span class="n"&gt;Dockerfile&lt;/span&gt;&lt;span class="err"&gt;，其内容如下：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;3.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pypi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tuna&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tsinghua&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;simple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;gunicorn&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;fast_api:app&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;./gunicorn.conf.py&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="n"&gt;fast_api项目根目录终端&lt;/span&gt;&lt;span class="err"&gt;，执行：&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;tools_flask&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;打包为镜像&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;#此处的fast_api为后端项目文件名称含fastapi的实现逻辑，注意文件名不要用“api.py”与已有模块冲突，运行不起来。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="err"&gt;运行&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;tools_flask&lt;/span&gt; &lt;span class="err"&gt;启动为容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="dockerfile内容"&gt;&lt;strong&gt;dockerfile内容&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-gdscript3" data-lang="gdscript3"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;3.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tools_flask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;ENV&lt;/span&gt; &lt;span class="n"&gt;TZ&lt;/span&gt; &lt;span class="n"&gt;Asia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Shanghai&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;TZ&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;TZ&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pypi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tuna&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tsinghua&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;simple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;uvicorn&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;fastapi_index:app&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;--host&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;--port&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;80&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="构建vue的步骤"&gt;&lt;strong&gt;构建vue的步骤&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-gdscript3" data-lang="gdscript3"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;在项目&lt;/span&gt;&lt;span class="n"&gt;tools_vue根目录&lt;/span&gt;&lt;span class="err"&gt;，创建&lt;/span&gt;&lt;span class="n"&gt;nginx夹&lt;/span&gt;&lt;span class="err"&gt;，该文件夹下新建文件&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf内容如下&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;#charset koi8-r;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;access_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;error_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;#error_page 404 /404.html;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# redirect server error pages to the static page /50x.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="mi"&gt;502&lt;/span&gt; &lt;span class="mi"&gt;503&lt;/span&gt; &lt;span class="mi"&gt;504&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;tools_vue项目根目录终端&lt;/span&gt;&lt;span class="err"&gt;，执行&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="err"&gt;，打包生成&lt;/span&gt;&lt;span class="n"&gt;dist文件夹&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;在项目&lt;/span&gt;&lt;span class="n"&gt;tools_vue根目录构建Dockerfile文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;efctools&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="n"&gt;tools_vue项目根目录终端&lt;/span&gt;&lt;span class="err"&gt;，执行：&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;tools_vue2&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;打包为镜像&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="err"&gt;运行&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;3002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="n"&gt;tools_vue2&lt;/span&gt; &lt;span class="err"&gt;启动为容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="dockerfile内容-1"&gt;dockerfile内容&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;FROM nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;COPY dist/ /usr/share/nginx/html/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;COPY nginx/default.conf /etc/nginx/conf.d/default.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>机器学习</title><link>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</guid><description>&lt;p&gt;机器学习&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;准备历史数据-&amp;gt;创建模型并训练历史数据-&amp;gt;新数据输入预测结果&lt;/p&gt;
&lt;p&gt;机器学习的分类：&lt;/p&gt;
&lt;p&gt;监督学习：数据带结果/标签&lt;/p&gt;
&lt;p&gt;无监督学习：一大堆没有标签结果，让机器自行分类检测。&lt;/p&gt;
&lt;p&gt;自监督学习：无需人工标注，通过数据本身结果生成伪标签或辅助任务(通常办法)&lt;/p&gt;
&lt;p&gt;强化学习：不断尝试和环境互动得到的反馈改变行为做出最有决策AIRgo。&lt;/p&gt;
&lt;p&gt;模型训练的3大阶段&lt;/p&gt;
&lt;p&gt;1.预训练-&amp;gt;海量无标注的文本，进行自监督学习。&lt;/p&gt;
&lt;p&gt;2.SFT监督微调。-&amp;gt;使用有标注的数据对基座模型进行微调，让模型能够适用特定任务，最终得到一个有偏好的模型。&lt;/p&gt;
&lt;p&gt;3.RLHF强化学习，-&amp;gt;基于人类反馈的期望进行学习(奖励模型)。&lt;/p&gt;</description></item><item><title>快速上手pytest项目</title><link>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bpytest%E9%A1%B9%E7%9B%AE/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bpytest%E9%A1%B9%E7%9B%AE/</guid><description>&lt;h2 id="tags-pytest-python"&gt;tags: [&amp;ldquo;pytest&amp;rdquo;, &amp;ldquo;python&amp;rdquo;]&lt;/h2&gt;
&lt;h1 id="快速上手pytest接口测试"&gt;快速上手Pytest接口测试&lt;/h1&gt;
&lt;h1 id="背景"&gt;背景&lt;/h1&gt;
&lt;p&gt;以前有分享过httprunner+pytest相关的使用方法，并且一直使用httprunner编写用自动化脚本，以前的经验可以快速帮我们上手pytest框架。为了快速上手pytest，HttpRunner 与Pytest 在编写自动化脚本异同点对比：&lt;/p&gt;
&lt;html&gt;&lt;body&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;对比维度&lt;/td&gt;&lt;td&gt;HttpRunner&lt;/td&gt;&lt;td&gt;Pytest&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;用例编写方式&lt;/td&gt;&lt;td&gt;支持YAML/JSON（低代码）和 pytest代码138&lt;/td&gt;&lt;td&gt;纯 Python代码编写，支持函数式&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;执行框架&lt;/td&gt;&lt;td&gt;基于pytest（3.x版本后）18&lt;/td&gt;&lt;td&gt;原生pytest框架，支持更灵活的&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;参数化&lt;/td&gt;&lt;td&gt;通过parameters在YAML/JSON中实现，或在 pytest代码中使用参数化装饰器16&lt;/td&gt;&lt;td&gt;原生支持 @pytest.mark.parametr 高，支持动态生成数据&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;断言机制&lt;/td&gt;&lt;td&gt;基于validate关键字，支持jmespath 表达式18&lt;/td&gt;&lt;td&gt;使用Python原生assert或第三方 pytest-assume 多断言)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;测试报告&lt;/td&gt;&lt;td&gt;支持Allure（3.x版本后不再自带HTML报告）18&lt;/td&gt;&lt;td&gt;依赖插件（如pytest-html、allure- 定制性强59&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;扩展性&lt;/td&gt;&lt;td&gt;通过debugtalk.py自定义函数，但框架耦合度高18&lt;/td&gt;&lt;td&gt;原生支持插件开发，可通过conf fixture，扩展性极强5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;用例分层&lt;/td&gt;&lt;td&gt;明确分层（APl/TestSuite/TestCase），适合原子接 口与流程组合18&lt;/td&gt;&lt;td&gt;无强制分层，但可通过模块化 page_object模式）实现类&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;学习曲线&lt;/td&gt;&lt;td&gt;低代码门槛，适合快速上手15&lt;/td&gt;&lt;td&gt;需 Python基础，但灵活性更高，道&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;
&lt;h1 id="项目初始化"&gt;项目初始化&lt;/h1&gt;
&lt;p&gt;克隆项目◦ git clone &lt;a href="mailto:git@gitlab.guangpuyun.cn"&gt;git@gitlab.guangpuyun.cn&lt;/a&gt;:clinic-diag/test/poct_api_test.git
了解项目结构&lt;/p&gt;
&lt;p&gt;&lt;img src="https://bluespace3.github.io/images/528752a3cec6442b7fb16aabcf1f313f94a9b0c3c9a71d46f85a3bb0ab45bcc6.jpg" alt=""&gt;&lt;/p&gt;
&lt;h1 id="安装依赖"&gt;安装依赖&lt;/h1&gt;
&lt;p&gt;◦ 项目根目录下打开终端，执行pip install -r requirements.txt&lt;/p&gt;
&lt;h1 id="测试用例格式"&gt;测试用例格式&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;用例文件以test_开头或_test结尾◦ 建议以场景命名-如四合一的快速检测：test_zk_quicktest.py&lt;/li&gt;
&lt;li&gt;用例集合——类，以Test开头（可以无）◦ 包含1个或多个测试用例函数&lt;/li&gt;
&lt;li&gt;测试用例函数以test_开头◦ 一个函数代表一条用例- $_-&amp;gt;$ 一个明确的测试点&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="用例转换"&gt;用例转换&lt;/h1&gt;
&lt;p&gt;1、运行脚本utils/swaager.py——爬取swagger文档资源,存放于/api/swaggerApi目录
2、运行脚本api/generateTestCases.py，生成基础用例，存放于/api目录
3、基础用例结构&lt;/p&gt;
&lt;p&gt;此时只是生成了接口的对象，还需要编写实现逻辑和传参进一步实现该对象，完成测试用例编写（见用例编写）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://bluespace3.github.io/images/e2e3d30579d03e71fcd65320f80da7a2b548bfc1056245fa3d54b9669e3ce7c3.jpg" alt=""&gt;&lt;/p&gt;
&lt;h1 id="用例编写"&gt;用例编写&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在/test对应的目录下新建用例文件，命名以test_开头，表明测试场景&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://bluespace3.github.io/mages/3dcd5da9b6d6fde4508a1aada61ca3d3486938faed0f48a273a4a4ac026db38f.jpg" alt=""&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;导入必要的包和基础用例，如：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;from utils.logger import loggerfrom api.poctMina.addcartusingPosT import YsbMallCartController&lt;/p&gt;
&lt;h1 id="3-编写测试用例"&gt;3. 编写测试用例&lt;/h1&gt;
&lt;p&gt;from utils.logger import logger fron api.poctMina.addCartUsinqPosT import YsbMallCartController def test_addCartUsing(getTokenBySecret,pytestconfig): 用例名称-体现在报告上 addCartUsing $\mathbf{\sigma}=\mathbf{\sigma}$ YsbHallCartController ( addcartUsing.base_url $\mathbf{\sigma}=\mathbf{\sigma}$ pytestconfig.getini(&amp;lsquo;poct-host&amp;rsquo;) 构造url addCartUsinq.data[&amp;lsquo;addNum&amp;rsquo;]=1 addCartUsing.data[&amp;lsquo;packageId&amp;rsquo;] $=2\dot{0}\dot{\Theta}$ addCartUsing.data[*token&amp;rsquo;]=getTokenBySecret(store=3o15659) 构造传参 response_data=addcartUsing.addcart() .json() 获取返回值 logger.info(response_data) assert response_data[&amp;lsquo;code&amp;rsquo;] $\scriptstyle==$ &amp;lsquo;40001&amp;rsquo; 断言&lt;/p&gt;</description></item><item><title>使用GiHub作为图床</title><link>https://bluespace3.github.io/post/git/%E4%BD%BF%E7%94%A8gihub%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/git/%E4%BD%BF%E7%94%A8gihub%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/</guid><description>&lt;h2 id="使用-github-作为免费图床的文档"&gt;使用 GitHub 作为免费图床的文档&lt;/h2&gt;
&lt;p&gt;最近就想找一款免费的图床来放置自己的图片，逛了一圈下来发现GitHub可以白嫖，于是乎，就有了这篇文章。&lt;/p&gt;
&lt;p&gt;GitHub 是一个非常流行的代码托管平台，除了代码存储外，你还可以使用 GitHub 来托管静态资源，比如图片。通过将图片上传到 GitHub 的仓库，你可以轻松获取图片的 URL，从而在网页或文档中嵌入这些图片。以下是如何使用 GitHub 作为免费图床的详细步骤。&lt;/p&gt;
&lt;h3 id="步骤-1-创建-github-仓库"&gt;步骤 1: 创建 GitHub 仓库&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;登录到 &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击右上角的 &amp;ldquo;+&amp;rdquo; 按钮，然后选择 &amp;ldquo;New repository&amp;rdquo;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;填写仓库的名称（例如：&lt;code&gt;my-image-hosting&lt;/code&gt;），并设置为公开（Public）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击 &amp;ldquo;Create repository&amp;rdquo; 创建仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://pic3.zhimg.com/v2-cdd72cbacf64cf512b0426eb2362d3e6_1440w.jpg" alt=""&gt;&lt;/p&gt;
&lt;h3 id="步骤-2-github获取个人的token"&gt;步骤 2: GitHub获取个人的Token&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;访问：&lt;a href="https://github.com/settings/tokens"&gt;settings-tokens&lt;/a&gt; ，点击&lt;strong&gt;Generate new token&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://picx.zhimg.com/v2-2148c04aa5bc07ccea01b2273ba65033_1440w.jpg" alt=""&gt;&lt;/p&gt;
&lt;p&gt;2.设置 token 属性 ，Expiration：永不过期，Select scopes：&lt;code&gt;repo&lt;/code&gt; 一定要全选，其他的无所谓 ，点击最下方&lt;strong&gt;创建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pica.zhimg.com/v2-ef2f47f1c64e0b095e040cf103ea8b62_1440w.jpg" alt=""&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;就会获得一个token字符串， &lt;strong&gt;⚠️ 注意：一定要收藏好 token，因为只会显示一次！&lt;/strong&gt;，关掉这个页面就再也看不见了。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;[!IMPORTANT] &lt;strong&gt;后续会继续使用这个token!!!!&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://pica.zhimg.com/v2-7efb7778246d4e3964471f46c290f790_1440w.jpg" alt=""&gt;&lt;/p&gt;
&lt;h3 id="步骤-3-下载picgo"&gt;步骤 3: 下载PicGo&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在PicGo最新页面上下载它的安装包。&lt;a href="https://github.com/Molunerfinn/PicGo/releases"&gt;PicGo下载页面&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://picx.zhimg.com/v2-4e1070ec6988ea104dd9f339af322d4b_1440w.jpg" alt=""&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装PicGo。无需赘述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://picx.zhimg.com/v2-86772b08f48e060e991b724d7d11b677_1440w.jpg" alt=""&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;PicGo 上传区配置选中你的配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://pic4.zhimg.com/v2-01a76c0126a75365b9bdc2e2163edda7_1440w.jpg" alt=""&gt;&lt;/p&gt;
&lt;p&gt;​ 选择完成配置之后就可以拖拉拽上传文件了。&lt;/p&gt;
&lt;h3 id="步骤-4-typora中使用"&gt;步骤 4: &lt;a href="https://zhida.zhihu.com/search?content_id=253465306&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=Typora&amp;amp;zhida_source=entity"&gt;Typora&lt;/a&gt;中使用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打开Typora，在文件选项中选中偏好设置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://pic3.zhimg.com/v2-b7c8c84a3f9046e6003ca2ca01e08540_1440w.jpg" alt=""&gt;&lt;/p&gt;</description></item><item><title>提示词技巧</title><link>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%8A%80%E5%B7%A7/</link><pubDate>Fri, 05 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/aigc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%8A%80%E5%B7%A7/</guid><description>&lt;p&gt;提示词技巧
总结：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329152414.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329153529.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329153627.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329153708.png" alt=""&gt;
&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/20250329153716.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;官方提示词库：
&lt;a href="https://api-docs.deepseek.com/zh-cn/prompt-library"&gt;https://api-docs.deepseek.com/zh-cn/prompt-library&lt;/a&gt;&lt;/p&gt;</description></item><item><title>docker使用笔记</title><link>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 03 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid><description>&lt;p&gt;docker pull ubuntu 载入ubuntu 镜像&lt;/p&gt;
&lt;p&gt;docker pull training/webapp # 载入镜像&lt;/p&gt;
&lt;p&gt;docker pull python:3.7 安装python镜像&lt;/p&gt;
&lt;p&gt;docker pull nginx 安装nginx镜像&lt;/p&gt;
&lt;p&gt;docker run -it python:3.7 /bin/bash 进入python镜像&lt;/p&gt;
&lt;p&gt;连接不上时，终端输入：&lt;/p&gt;
&lt;p&gt;1.cd &amp;ldquo;C:\Program Files\Docker\Docker&amp;rdquo;&lt;/p&gt;
&lt;p&gt;2.DockerCli.exe -SwitchDaemon&lt;/p&gt;
&lt;p&gt;docker run -it ubuntu /bin/bash 启用进入容器&lt;/p&gt;
&lt;p&gt;exit退出容器&lt;/p&gt;
&lt;p&gt;docker run -d -P training/webapp python app.py 后台启用容器并随机映射到本机端口&lt;/p&gt;
&lt;p&gt;docker run -d -p 5000:5000 training/webapp python app.py后台启用容器并指定映射到&lt;/p&gt;
&lt;p&gt;docker logs -f id 查看应用日志&lt;/p&gt;
&lt;p&gt;docker logs -f -t &amp;ndash;tail=100 dockerid 动态查看最新100条日志&lt;/p&gt;
&lt;p&gt;docker top id 查看容器内部应用进程&lt;/p&gt;
&lt;p&gt;docker ps -a 查看所有容器(可查容器id)&lt;/p&gt;</description></item><item><title>encrypted-example</title><link>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/encrypted-example/</link><pubDate>Wed, 03 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/encrypted-example/</guid><description>&lt;h2 id="这是一篇加密的文章"&gt;这是一篇加密的文章&lt;/h2&gt;
&lt;p&gt;只有输入正确的密码才能查看这篇文章的内容。&lt;/p&gt;
&lt;h3 id="如何设置文章加密"&gt;如何设置文章加密&lt;/h3&gt;
&lt;p&gt;在文章的前置参数中添加以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;你的密码&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以为文章添加密码保护了。&lt;/p&gt;
&lt;h3 id="密码保护的工作原理"&gt;密码保护的工作原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;当用户访问加密文章时，会显示密码输入框&lt;/li&gt;
&lt;li&gt;用户输入正确的密码后，文章内容才会显示&lt;/li&gt;
&lt;li&gt;密码验证在浏览器端进行，不需要服务器支持&lt;/li&gt;
&lt;li&gt;使用sessionStorage保存解锁状态，避免刷新页面后需要重新输入密码&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="注意事项"&gt;注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这种加密方式只是前端加密，不能防止真正的黑客攻击&lt;/li&gt;
&lt;li&gt;适合用于简单的内容保护，不适合保护高度敏感的信息&lt;/li&gt;
&lt;li&gt;密码直接保存在文章的前置参数中，所以不要使用您在其他地方使用的重要密码&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>python中的os函数用法</title><link>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python%E4%B8%AD%E7%9A%84os%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</link><pubDate>Wed, 03 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python%E4%B8%AD%E7%9A%84os%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</guid><description>&lt;hr&gt;
&lt;p&gt;title: &amp;ldquo;python的os模块使用&amp;rdquo;&lt;/p&gt;
&lt;p&gt;categories: [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;编程&amp;rdquo;, &amp;ldquo;python&amp;rdquo;]
date: 2025-03-20T12:59:32+08:00&lt;/p&gt;
&lt;p&gt;draft: false&lt;/p&gt;
&lt;h2 id="tags-os-python-教程"&gt;tags: [&amp;ldquo;os&amp;rdquo;, &amp;ldquo;python&amp;rdquo;, &amp;ldquo;教程&amp;rdquo;]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;os.listdir(path)
获取文件夹下全部文件，的列表&lt;/li&gt;
&lt;li&gt;os.path.join(path1,path2)
将路径path1和路径path2拼接成新的路径，path1//path2&lt;/li&gt;
&lt;li&gt;base_dir = os.path.dirname(os.path.abspath(&lt;strong&gt;file&lt;/strong&gt;))
获取当前文件的绝对路径&lt;/li&gt;
&lt;li&gt;input_file = os.path.join(base_dir, &lt;strong&gt;&amp;quot;../resource/swaggerApi/clinic-ysb-app_OpenAPI.json&amp;quot;&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>scrapy爬柚子网示例</title><link>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/scrapy%E7%88%AC%E6%9F%9A%E5%AD%90%E7%BD%91%E7%A4%BA%E4%BE%8B/</link><pubDate>Wed, 03 Sep 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/scrapy%E7%88%AC%E6%9F%9A%E5%AD%90%E7%BD%91%E7%A4%BA%E4%BE%8B/</guid><description>&lt;p&gt;柚子网https://www.uu-zz.com/&lt;/p&gt;
&lt;p&gt;爬取页码&lt;/p&gt;
&lt;p&gt;遍历页面内对应的视频集的链接&lt;/p&gt;
&lt;p&gt;&lt;img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/O1YCbvbQBoiZYHxxbO7cqOi6nKb?preview_type=16" alt=""&gt;&lt;/p&gt;
&lt;p&gt;遍历视频内子视频链接&lt;/p&gt;
&lt;p&gt;&lt;img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/CKMPbtR4souEnDxWowNcxAuenNc?preview_type=16" alt=""&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://security.feishu.cn/link/safety?target=https%3A%2F%2Fwww.uu-zz.com%2F%2B%E5%AD%90%E8%A7%86%E9%A2%91%E9%93%BE%E6%8E%A5&amp;amp;scene=ccm&amp;amp;logParams=%7B%22location%22%3A%22ccm_mindnote%22%7D&amp;amp;lang=zh-CN"&gt;https://www.uu-zz.com/+子视频链接&lt;/a&gt;，发送get请求&lt;/p&gt;
&lt;p&gt;&lt;img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/ClLDbx3s5o29xpxWKrncnG3Enzg?preview_type=16" alt=""&gt;!&lt;/p&gt;
&lt;p&gt;获得m3u8文件，储存在数据库&lt;/p&gt;</description></item><item><title>关于投资的反思_副本</title><link>https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E5%85%B3%E4%BA%8E%E6%8A%95%E8%B5%84%E7%9A%84%E5%8F%8D%E6%80%9D_%E5%89%AF%E6%9C%AC/</link><pubDate>Thu, 10 Apr 2025 22:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E5%85%B3%E4%BA%8E%E6%8A%95%E8%B5%84%E7%9A%84%E5%8F%8D%E6%80%9D_%E5%89%AF%E6%9C%AC/</guid><description>&lt;h3 id="25年一季度投资反思"&gt;25年一季度投资反思&lt;/h3&gt;
&lt;p&gt;最近几天资产缩水严重，在此做一个简单总结。&lt;/p&gt;
&lt;p&gt;。。。。。。&lt;/p&gt;
&lt;div class="encrypted-content" id="encrypted-%!s(int64=1757094523)" data-password="tianqinghong"&gt;
&lt;div class="encrypted-lock"&gt;
&lt;div class="lock-icon"&gt;🔒&lt;/div&gt;
&lt;h3&gt;此内容已加密&lt;/h3&gt;
&lt;p&gt;请输入密码查看受保护的内容&lt;/p&gt;
&lt;div class="password-input-group"&gt;
&lt;input type="password" class="password-input" placeholder="请输入密码..." /&gt;
&lt;button class="decrypt-btn" onclick="decryptContent('encrypted-%!s(int64=1757094523)')"&gt;解锁&lt;/button&gt;
&lt;/div&gt;
&lt;div class="error-message" id="encrypted-%!s(int64=1757094523)-error" style="display: none;"&gt;
密码错误，请重试
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="encrypted-content-wrapper" id="encrypted-%!s(int64=1757094523)-content" style="display: none;"&gt;
&lt;p&gt;一季度大概亏了1w左右。因为一个黑天鹅事件，美国向中国加了125%关税。 虽然后面又涨回来了，但是我在市场最恐慌的时候卖出了至少2/3的股票仓位，导致后面的反弹与我无缘。经过这次亏损我有一下几点反思。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这说明我对这种短期的方向判断力是不够的，不太适合做短线。&lt;/li&gt;
&lt;li&gt;另外一定要合理控制仓位，我之所以承受这么大的波动损失是因为我的股票型基金+股票的配比太大。借这次减仓后，需要合理配置这类高风险的资产。以后股票资产不能超过总账户的10%&lt;/li&gt;
&lt;li&gt;另一个反思的点是我需要拉长定投周期，如果定投只能坚持几个月往往是在在左侧定投右侧卖出造成较大的亏损。既然选择了定投就应该让定投起到平滑操作带来的损失，去博大方向上的机会。&lt;/li&gt;
&lt;li&gt;最后一个点是，在打算定投一个标的的适合一定要看看是否足够便宜，如果处于高点我宁可不参与。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;style&gt;
.encrypted-summary-indicator {
display: inline-block;
margin: 5px 0;
}
.encrypted-badge {
display: inline-flex;
align-items: center;
gap: 4px;
padding: 2px 8px;
background-color: #f8f9fa;
color: #6c757d;
font-size: 12px;
border-radius: 12px;
border: 1px solid #dee2e6;
vertical-align: middle;
}
.encrypted-badge:hover {
background-color: #e9ecef;
border-color: #adb5bd;
}
.encrypted-content {
margin: 20px 0;
border: 2px dashed #ddd;
border-radius: 8px;
overflow: hidden;
}
.encrypted-lock {
padding: 30px;
text-align: center;
background-color: #f8f9fa;
}
.lock-icon {
font-size: 48px;
margin-bottom: 15px;
}
.encrypted-lock h3 {
margin: 0 0 10px 0;
color: #333;
font-size: 18px;
}
.encrypted-lock p {
margin: 0 0 20px 0;
color: #666;
font-size: 14px;
}
.password-input-group {
display: flex;
gap: 10px;
justify-content: center;
max-width: 300px;
margin: 0 auto;
}
.password-input {
flex: 1;
padding: 10px 15px;
border: 1px solid #ddd;
border-radius: 4px;
font-size: 14px;
}
.password-input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}
.decrypt-btn {
padding: 10px 20px;
background-color: #007bff;
color: white;
border: none;
border-radius: 4px;
cursor: pointer;
font-size: 14px;
transition: background-color 0.2s;
}
.decrypt-btn:hover {
background-color: #0056b3;
}
.decrypt-btn:active {
transform: scale(0.98);
}
.error-message {
color: #dc3545;
font-size: 12px;
margin-top: 10px;
padding: 8px;
background-color: #f8d7da;
border: 1px solid #f5c6cb;
border-radius: 4px;
}
.encrypted-content-wrapper {
padding: 20px;
background-color: white;
}
&lt;/style&gt;
&lt;script&gt;
function decryptContent(elementId) {
const encryptedDiv = document.getElementById(elementId);
const passwordInput = encryptedDiv.querySelector('.password-input');
const errorMsg = document.getElementById(elementId + '-error');
const lockDiv = encryptedDiv.querySelector('.encrypted-lock');
const contentDiv = document.getElementById(elementId + '-content');
const enteredPassword = passwordInput.value;
const correctPassword = encryptedDiv.getAttribute('data-password');
if (enteredPassword === correctPassword) {
lockDiv.style.display = 'none';
contentDiv.style.display = 'block';
errorMsg.style.display = 'none';
passwordInput.value = '';
window.dispatchEvent(new Event('resize'));
} else {
errorMsg.style.display = 'block';
passwordInput.value = '';
passwordInput.focus();
setTimeout(() =&gt; {
errorMsg.style.display = 'none';
}, 3000);
}
}
document.addEventListener('DOMContentLoaded', function() {
const encryptedContents = document.querySelectorAll('.encrypted-content');
encryptedContents.forEach(function(encryptedDiv) {
const passwordInput = encryptedDiv.querySelector('.password-input');
if (passwordInput) {
passwordInput.addEventListener('keypress', function(e) {
if (e.key === 'Enter') {
const elementId = encryptedDiv.id;
decryptContent(elementId);
}
});
}
});
});
&lt;/script&gt;</description></item><item><title>25年一季度汇报总结反思</title><link>https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/25%E5%B9%B4%E4%B8%80%E5%AD%A3%E5%BA%A6%E6%80%BB%E7%BB%93%E5%8F%8D%E6%80%9D/</link><pubDate>Fri, 28 Mar 2025 22:59:32 +0800</pubDate><guid>https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/25%E5%B9%B4%E4%B8%80%E5%AD%A3%E5%BA%A6%E6%80%BB%E7%BB%93%E5%8F%8D%E6%80%9D/</guid><description>&lt;h3 id="关于汇报过程的反思"&gt;关于汇报过程的反思&lt;/h3&gt;
&lt;div class="encrypted-content" id="encrypted-%!s(int64=1757094523)" data-password="tianqinghong"&gt;
&lt;div class="encrypted-lock"&gt;
&lt;div class="lock-icon"&gt;🔒&lt;/div&gt;
&lt;h3&gt;此内容已加密&lt;/h3&gt;
&lt;p&gt;请输入密码查看受保护的内容&lt;/p&gt;
&lt;div class="password-input-group"&gt;
&lt;input type="password" class="password-input" placeholder="请输入密码..." /&gt;
&lt;button class="decrypt-btn" onclick="decryptContent('encrypted-%!s(int64=1757094523)')"&gt;解锁&lt;/button&gt;
&lt;/div&gt;
&lt;div class="error-message" id="encrypted-%!s(int64=1757094523)-error" style="display: none;"&gt;
密码错误，请重试
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="encrypted-content-wrapper" id="encrypted-%!s(int64=1757094523)-content" style="display: none;"&gt;
&lt;ol&gt;
&lt;li&gt;汇报过程难免还是有些紧张，感觉到不是内心害怕什么，就是单纯的紧张，可能是缺乏长时间汇报的经验，或者当初不擅长表达和总结。不过与以前对比效果稍好，这次准备的反而不多，可能是最后汇报的原因。并没有太多火力集中在我身上。&lt;/li&gt;
&lt;li&gt;汇报往往会有许多问题和意见，对于别人的意见的看法，有些是好的意见，但是也不乏一些意见仅仅是提问人为了找存在感而提出来的。而且有些人相当强势，咄咄逼人，不给你反驳的机会。这种人往往都是狭隘和傲娇的，往往沉浸在自己的世界。对于这种意见，一笑了知即可。但是当触及到我们的棱角时，需要适当的发作。否则这些人会得寸进尺。&lt;/li&gt;
&lt;li&gt;这次汇报准备并不充分，但是汇报效果反而不错。与之前精心准备，但是效果欠佳形成鲜明对比，这可能是心态上不重视，反而给自己临产发挥的空间，不至于被前期的准备束缚。当然，有些总结是不够的，更多的只是把组内做的事情陈列出来，缺乏系统性的总结，思路是不够清晰的。下次重点的提炼总结相关事项。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;style&gt;
.encrypted-summary-indicator {
display: inline-block;
margin: 5px 0;
}
.encrypted-badge {
display: inline-flex;
align-items: center;
gap: 4px;
padding: 2px 8px;
background-color: #f8f9fa;
color: #6c757d;
font-size: 12px;
border-radius: 12px;
border: 1px solid #dee2e6;
vertical-align: middle;
}
.encrypted-badge:hover {
background-color: #e9ecef;
border-color: #adb5bd;
}
.encrypted-content {
margin: 20px 0;
border: 2px dashed #ddd;
border-radius: 8px;
overflow: hidden;
}
.encrypted-lock {
padding: 30px;
text-align: center;
background-color: #f8f9fa;
}
.lock-icon {
font-size: 48px;
margin-bottom: 15px;
}
.encrypted-lock h3 {
margin: 0 0 10px 0;
color: #333;
font-size: 18px;
}
.encrypted-lock p {
margin: 0 0 20px 0;
color: #666;
font-size: 14px;
}
.password-input-group {
display: flex;
gap: 10px;
justify-content: center;
max-width: 300px;
margin: 0 auto;
}
.password-input {
flex: 1;
padding: 10px 15px;
border: 1px solid #ddd;
border-radius: 4px;
font-size: 14px;
}
.password-input:focus {
outline: none;
border-color: #007bff;
box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}
.decrypt-btn {
padding: 10px 20px;
background-color: #007bff;
color: white;
border: none;
border-radius: 4px;
cursor: pointer;
font-size: 14px;
transition: background-color 0.2s;
}
.decrypt-btn:hover {
background-color: #0056b3;
}
.decrypt-btn:active {
transform: scale(0.98);
}
.error-message {
color: #dc3545;
font-size: 12px;
margin-top: 10px;
padding: 8px;
background-color: #f8d7da;
border: 1px solid #f5c6cb;
border-radius: 4px;
}
.encrypted-content-wrapper {
padding: 20px;
background-color: white;
}
&lt;/style&gt;
&lt;script&gt;
function decryptContent(elementId) {
const encryptedDiv = document.getElementById(elementId);
const passwordInput = encryptedDiv.querySelector('.password-input');
const errorMsg = document.getElementById(elementId + '-error');
const lockDiv = encryptedDiv.querySelector('.encrypted-lock');
const contentDiv = document.getElementById(elementId + '-content');
const enteredPassword = passwordInput.value;
const correctPassword = encryptedDiv.getAttribute('data-password');
if (enteredPassword === correctPassword) {
lockDiv.style.display = 'none';
contentDiv.style.display = 'block';
errorMsg.style.display = 'none';
passwordInput.value = '';
window.dispatchEvent(new Event('resize'));
} else {
errorMsg.style.display = 'block';
passwordInput.value = '';
passwordInput.focus();
setTimeout(() =&gt; {
errorMsg.style.display = 'none';
}, 3000);
}
}
document.addEventListener('DOMContentLoaded', function() {
const encryptedContents = document.querySelectorAll('.encrypted-content');
encryptedContents.forEach(function(encryptedDiv) {
const passwordInput = encryptedDiv.querySelector('.password-input');
if (passwordInput) {
passwordInput.addEventListener('keypress', function(e) {
if (e.key === 'Enter') {
const elementId = encryptedDiv.id;
decryptContent(elementId);
}
});
}
});
});
&lt;/script&gt;</description></item><item><title>金字塔原理解析</title><link>https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link><pubDate>Tue, 25 Mar 2025 21:43:32 +0800</pubDate><guid>https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</guid><description>&lt;h4 id="金字塔原理读书笔记全"&gt;《&lt;a href="https://so.csdn.net/so/search?q=%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86&amp;amp;spm=1001.2101.3001.7020"&gt;金字塔原理&lt;/a&gt;》读书笔记（全）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%b8%80-%e8%a1%a8%e8%be%be%e7%9a%84%e9%80%bb%e8%be%91"&gt;一、 表达的逻辑&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#1-%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e7%94%a8%e9%87%91%e5%ad%97%e5%a1%94"&gt;1. 为什么要用金字塔？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#2-%e9%87%91%e5%ad%97%e5%a1%94%e5%86%85%e9%83%a8%e7%bb%93%e6%9e%84"&gt;2. 金字塔内部结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#3-%e5%a6%82%e4%bd%95%e6%9e%84%e5%bb%ba%e9%87%91%e5%ad%97%e5%a1%94"&gt;3. 如何构建金字塔？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#4-%e5%ba%8f%e8%a8%80%e7%9a%84%e5%85%b7%e4%bd%93%e5%86%99%e6%b3%95"&gt;4. 序言的具体写法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#5-%e6%bc%94%e7%bb%8e%e6%8e%a8%e7%90%86%e4%b8%8e%e5%bd%92%e7%ba%b3%e6%8e%a8%e7%90%86"&gt;5. 演绎推理与归纳推理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%ba%8c-%e6%80%9d%e8%80%83%e7%9a%84%e9%80%bb%e8%be%91"&gt;二、 思考的逻辑&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#6%e5%ba%94%e7%94%a8%e9%80%bb%e8%be%91%e9%a1%ba%e5%ba%8f"&gt;6.应用逻辑顺序&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%b8%80%e6%97%b6%e9%97%b4%e9%a1%ba%e5%ba%8f"&gt;（一）时间顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%ba%8c%e7%bb%93%e6%9e%84%e9%a1%ba%e5%ba%8f"&gt;（二）结构顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%b8%89%e7%a8%8b%e5%ba%a6%e9%a1%ba%e5%ba%8f"&gt;（三）程度顺序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#7%e6%a6%82%e6%8b%ac%e8%bf%99%e7%a7%8d%e6%80%9d%e6%83%b3"&gt;7.概括这种思想&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%b8%80%e8%a1%8c%e5%8a%a8%e6%80%a7%e6%80%9d%e6%83%b3%e7%9a%84%e6%a6%82%e6%8b%ac%e8%af%b4%e6%98%8e%e9%87%87%e5%8f%96%e8%a1%8c%e5%8a%a8%e7%9a%84%e7%bb%93%e6%9e%9c%e7%9b%ae%e6%a0%87"&gt;（一）行动性思想的概括——说明采取行动的结果/目标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%ba%8c%e6%8f%8f%e8%bf%b0%e6%80%a7%e6%80%9d%e6%83%b3%e7%9a%84%e6%a6%82%e6%8b%ac%e6%89%be%e5%87%ba%e5%90%84%e7%bb%93%e8%ae%ba%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b1%e6%80%a7"&gt;（二）描述性思想的概括——找出各结论之间的共性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%b8%89-%e8%a7%a3%e5%86%b3%e9%97%ae%e9%a2%98%e7%9a%84%e9%80%bb%e8%be%91"&gt;三、 解决问题的逻辑&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#8%e7%95%8c%e5%ae%9a%e9%97%ae%e9%a2%98"&gt;8.界定问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%b8%80%e7%95%8c%e5%ae%9a%e9%97%ae%e9%a2%98%e7%9a%84%e8%bf%9e%e7%bb%ad%e5%88%86%e6%9e%90%e6%b3%95"&gt;（一）界定问题的连续分析法：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e4%ba%8c%e7%95%8c%e5%ae%9a%e9%97%ae%e9%a2%98%e7%9a%84%e6%a1%86%e6%9e%b6"&gt;（二）界定问题的框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#9%e7%bb%93%e6%9e%84%e5%8c%96%e5%88%86%e6%9e%90%e9%97%ae%e9%a2%98"&gt;9.结构化分析问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e5%9b%9b-%e6%bc%94%e7%a4%ba%e7%9a%84%e9%80%bb%e8%be%91"&gt;四、 演示的逻辑&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#10%e5%9c%a8%e4%b9%a6%e9%9d%a2%e4%b8%8a%e5%91%88%e7%8e%b0%e9%87%91%e5%ad%97%e5%a1%94"&gt;10.在书面上呈现金字塔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#11%e5%9c%a8ppt%e4%b8%ad%e5%91%88%e7%8e%b0%e9%87%91%e5%ad%97%e5%a1%94"&gt;11.在PPT中呈现金字塔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#12%e5%9c%a8%e5%ad%97%e9%87%8c%e8%a1%8c%e9%97%b4%e5%91%88%e7%8e%b0%e9%87%91%e5%ad%97%e5%a1%94"&gt;12.在字里行间呈现金字塔&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e8%af%bb%e5%90%8e%e5%bf%83%e5%be%97"&gt;读后心得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bluespace3.github.io/post/%E6%80%9D%E8%80%83/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/#%e9%83%a8%e5%88%86%e5%8f%82%e8%80%83%e7%ac%94%e8%ae%b0"&gt;部分参考笔记：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 《金字塔原理》资源EPUB：链接：https://pan.baidu.com/s/1-2uv0ktITGT51ft603KfCQ
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 提取码：aioh
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 《金字塔原理》资源PDF：链接：https://pan.baidu.com/s/1Z5WIpUSCm9qr7sJhDyf-sQ
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 提取码：h1sk
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;12345AI写代码
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;金字塔原理是为了解决沟通、表达或是思考问题时思维混乱、分不清主次的问题。而其背后的方法论就是–搭建金字塔，以金字塔原理进行表达。书分为四部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表达的逻辑：说，使用金字塔原理的原因和具体构建方法；&lt;/li&gt;
&lt;li&gt;思考的逻辑：想，使用金字塔原理过程中的应用逻辑要素；&lt;/li&gt;
&lt;li&gt;解决问题的逻辑：做，在实例中界定、解构、分析、解决问题；&lt;/li&gt;
&lt;li&gt;演示的逻辑：表演，在PPT演示中和文字中呈现金字塔。
&lt;img src="https://raw.githubusercontent.com/bluespace3/images/master/%E9%87%91%E5%AD%97%E5%A1%94%E4%B8%AD%E5%BF%83%E8%AE%BA%E7%82%B9.png" alt="在这里插入图片描述"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="一-表达的逻辑"&gt;一、 表达的逻辑&lt;/h2&gt;
&lt;h3 id="1-为什么要用金字塔"&gt;1. 为什么要用金字塔？&lt;/h3&gt;
&lt;p&gt;究其原因是和人脑的思维逻辑有关系，人们思考的习惯方式倾向于对输入信息进行自动联想和关联，而对于那些没有逻辑或关联的内容习惯性忽略。所以金字塔结构表达，加强逻辑关联，可以让我们沟通更加高效。《金字塔原理》中指出，人类的思维结构一般有以下几个规律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大脑会自动将有相关联的信息进行归类；&lt;/li&gt;
&lt;li&gt;一次记忆不超过7个思想、概念或项目；&lt;/li&gt;
&lt;li&gt;在进行观点阐述时将背景、冲突、疑问等进行说明与解答可以更好地吸引读者注意力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此当我们在进行写作和演讲活动时，为了让受众更好地了解并接受我们所表达的观点我们必须：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;归类分组，将思想组织成金字塔&lt;/strong&gt;：将关键词罗列出来，并组织归类；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;找出逻辑关系，抽象概况&lt;/strong&gt;：找到同类内容之后，我们需要对这部分共性内容进行抽象；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自上而下表达，结论先行&lt;/strong&gt;：当我们先提出总的概念，再列出具体项目，即自上而下地呈现思想时，可以最有效的进行沟通和写作表达，类似于从收敛到发散的过程，脑图结构；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自下而上思考，总结概括&lt;/strong&gt;：思维从底层开始构建，句子按照某种逻辑顺序组成段落，之后将段落组成章节，最后章节组成文章，金字塔最顶端的思想（中心思想、核心观点）代表整片文章观点。&lt;img src="https://i-blog.csdnimg.cn/blog_migrate/362bfb90a78a3f267ddfe0333372fe20.png" alt="文章中思想应组成单一思想统领下的金字塔结构"&gt;文章的思想有三种关联方式：向上、向下、横向。&lt;/li&gt;
&lt;li&gt;纵向：文章中每一层次上的思想必须是对下一层次思想的概括&lt;/li&gt;
&lt;li&gt;横向：每组中的思想必须同属于同一逻辑范畴&lt;/li&gt;
&lt;li&gt;横向：每组中思想必须按逻辑顺序组织&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而思想的组织存在4种逻辑顺序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;演绎顺序&lt;/strong&gt;：大前提、小前提、结论&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间（步骤）顺序&lt;/strong&gt;：第一、第二、第三&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构（空间）顺序&lt;/strong&gt;：波士顿、纽约、华盛顿&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;程度（重要性）顺序&lt;/strong&gt;：最重要、次重要&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-金字塔内部结构"&gt;2. 金字塔内部结构&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;纵向关系&lt;/strong&gt;：纵向关系是疑问-回答式的表达方式，让读者产生”为什么这么做的想法“，类似于层层推理。
&lt;img src="https://i-blog.csdnimg.cn/blog_migrate/6293c4ba0f4ff6bdab25842805d19b58.png" alt="在这里插入图片描述"&gt;&lt;img src="https://i-blog.csdnimg.cn/blog_migrate/ac3217655f95ce686f2e87eb5ea0950a.png" alt="在这里插入图片描述"&gt;&lt;/p&gt;</description></item><item><title>Gemma 3本地部署教程</title><link>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/gemma-3%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</link><pubDate>Wed, 05 Mar 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/gemma-3%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</guid><description>&lt;p&gt;Gemma 3 被谷歌称为目前最强的开源视觉模型之一。 该模型支持超过35种语言，能够分析文本、图像和短视频。值得注意的是，Gemma 3 的视觉编码器经过升级，支持高分辨率和非方形图像，并引入了 ShieldGemma 2 图像安全分类器，用于过滤被分类为性暗示、危险或暴力的内容。这些特性使得 Gemma 3 成为当前最强大的开源视觉模型之一。&lt;/p&gt;
&lt;h4 id="最新的-gemma-3-多模态开源模型新功能"&gt;最新的 Gemma 3 多模态开源模型新功能&lt;/h4&gt;
&lt;p&gt;使用世界上最好的单加速器模型进行构建： Gemma 3 以其尺寸提供最先进的性能，在 LMArena 排行榜的初步人类偏好评估中胜过 Llama3-405B、DeepSeek-V3 和 o3-mini。这可以帮助您创建可安装在单个 GPU 或 TPU 主机上的引人入胜的用户体验。
以 140 种语言走向全球：构建使用客户语言的应用程序。Gemma 3 提供对超过 35 种语言的开箱即用支持和对超过 140 种语言的预训练支持。
打造具备高级文本和视觉推理能力的AI：轻松构建分析图片、文本、短视频等应用，开启交互智能化新可能1。
使用扩展的上下文窗口处理复杂任务： Gemma 3 提供 128k 令牌上下文窗口，让您的应用程序处理和理解大量信息。
使用函数调用创建 AI 驱动的工作流程： Gemma 3 支持函数调用和结构化输出，以帮助您自动执行任务并构建代理体验。
通过量化模型更快地实现高性能： Gemma 3 引入了官方量化版本，减少了模型大小和计算要求，同时保持了高精度。&lt;/p&gt;
&lt;p&gt;本地安装，单显卡可以选择1b，4b，12b，27b，推荐选择27b，因为Gemma 3 27B 处于帕累托最佳点.&lt;/p&gt;
&lt;h4 id="本地部署gemma-3开源大模型"&gt;&lt;strong&gt;本地部署Gemma 3开源大模型：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;1、下载官方 Ollama 【 &lt;strong&gt;&lt;a href="https://ollama.com/"&gt;点击前往&lt;/a&gt;&lt;/strong&gt; 】 ，并通过下方的安装命令执行下载：&lt;/p&gt;
&lt;p&gt;普通用户建议选择4b和12b，显卡好的可以上27b&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ollama run gemma3:1b
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ollama run gemma3:4b
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ollama run gemma3:12b
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ollama run gemma3:27b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、通过Cherry Studio,添加本地大模型后使用
&lt;img src="https://bluespace3.github.io/images/Gemma3%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B_1743944257267.png" alt="Gemma3本地部署教程_1743944257267"&gt;&lt;/p&gt;</description></item><item><title>Go语言--安装和环境搭配</title><link>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80--%E5%AE%89%E8%A3%85%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E9%85%8D/</link><pubDate>Wed, 05 Mar 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80--%E5%AE%89%E8%A3%85%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E9%85%8D/</guid><description>&lt;h3 id="一go简介"&gt;一.Go简介&lt;/h3&gt;
&lt;p&gt;Go 语言（又称 Golang）是由 Google 开发的一种开源&lt;a href="https://so.csdn.net/so/search?q=%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80&amp;amp;spm=1001.2101.3001.7020"&gt;编程语言&lt;/a&gt;，于 2009 年正式对外发布。下面从多个方面为你介绍它：&lt;/p&gt;
&lt;h4 id="设计目标"&gt;设计目标&lt;/h4&gt;
&lt;p&gt;Go 语言的设计初衷是为了解决大规模&lt;a href="https://so.csdn.net/so/search?q=%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91&amp;amp;spm=1001.2101.3001.7020"&gt;软件开发&lt;/a&gt;中的一些问题，比如编译速度慢、并发编程复杂、代码可维护性差等。所以它结合了静态语言的性能优势和动态语言的开发效率。&lt;/p&gt;
&lt;h4 id="特点"&gt;特点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高效的编译和执行&lt;/strong&gt;：Go 语言拥有快速的编译速度，这使得开发过程更加流畅。同时，它的执行效率也很高，能充分利用现代多核处理器的性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置并发支持&lt;/strong&gt;：Go 语言原生支持并发编程，通过 &lt;code&gt;goroutine&lt;/code&gt;和 &lt;code&gt;channel&lt;/code&gt;可以很方便地实现高并发程序。&lt;code&gt;goroutine&lt;/code&gt;是一种轻量级的线程，占用资源少，创建和销毁的开销小；&lt;code&gt;channel&lt;/code&gt;则用于 &lt;code&gt;goroutine&lt;/code&gt;之间的通信和同步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;垃圾回收机制&lt;/strong&gt;：它具备自动垃圾回收功能，开发者无需手动管理内存，减少了内存泄漏的风险，提高了开发效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丰富的标准库&lt;/strong&gt;：标准库涵盖了网络编程、文件操作、加密解密等多个领域，为开发者提供了便利，减少了对第三方库的依赖。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台支持&lt;/strong&gt;：可以在不同的操作系统和硬件平台上编译和运行，方便开发跨平台的应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="应用场景"&gt;应用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;云计算与容器编排&lt;/strong&gt;：像 Docker 和 Kubernetes 这类知名项目，就是用 Go 语言开发的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络编程&lt;/strong&gt;：由于其出色的并发性能和网络库，Go 语言非常适合开发网络服务器、代理服务器等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式系统&lt;/strong&gt;：在分布式系统中，Go 语言的并发模型和网络编程能力使其能够高效地处理大量的并发请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="二go语言安装与配置"&gt;二、Go语言安装与配置&lt;/h3&gt;
&lt;p&gt;Go语言支持以下系统：Linux、Mac、Windows。&lt;/p&gt;
&lt;p&gt;安装包下载地址：&lt;a href="https://go.dev/" title="The Go Programming Language"&gt;The Go Programming Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i-blog.csdnimg.cn/direct/a7dff5ff7bda44cc8408d8355ec1ceb1.png" alt=""&gt;&lt;/p&gt;
&lt;h3 id="windows"&gt;windows&lt;/h3&gt;
&lt;p&gt;直接安装系统下载安装即可！&lt;/p&gt;
&lt;h3 id="linux"&gt;Linux&lt;/h3&gt;
&lt;h5 id="将下载的二进制包解压至usrlocal目录"&gt;将下载的二进制包解压至/usr/local目录&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cobol" data-lang="cobol"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;tar -C&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;local&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;xzf&lt;/span&gt; &lt;span class="nv"&gt;go1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;linux-amd64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;gz&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="nv"&gt;AI&lt;/span&gt;&lt;span class="err"&gt;写代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="将-usrlocalgobin-目录添加至-path-环境变量"&gt;将 /usr/local/go/bin 目录添加至 PATH 环境变量：&lt;/h5&gt;
&lt;p&gt;可以编辑 /etc/profile，并将以下命令添加该文件的末尾，这样就可以永久生效：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-ruby" data-lang="ruby"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="no"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$PATH&lt;/span&gt;&lt;span class="ss"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="no"&gt;AI写代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cobol" data-lang="cobol"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;source&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;profileAI&lt;/span&gt;&lt;span class="err"&gt;写代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="三编写基本测试用例"&gt;三.编写基本测试用例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="nx"&gt;AI写代码&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://i-blog.csdnimg.cn/direct/18dc582244354f9883843fc711ddb6d2.png" alt=""&gt;&lt;/p&gt;</description></item><item><title>Hugo静态网站生成器入门指南</title><link>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/hugo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link><pubDate>Wed, 05 Mar 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/hugo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid><description>&lt;h2 id="什么是hugo"&gt;什么是Hugo？&lt;/h2&gt;
&lt;p&gt;Hugo是一个用Go语言编写的快速、现代的静态网站生成器。它可以将Markdown文件转换为HTML页面，非常适合构建文档网站、博客等。&lt;/p&gt;
&lt;h2 id="hugo的主要特点"&gt;Hugo的主要特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;极快的构建速度&lt;/li&gt;
&lt;li&gt;丰富的主题支持&lt;/li&gt;
&lt;li&gt;简单的Markdown内容管理&lt;/li&gt;
&lt;li&gt;强大的模板系统&lt;/li&gt;
&lt;li&gt;内置的短代码功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="安装hugo"&gt;安装Hugo&lt;/h2&gt;
&lt;p&gt;在Windows上安装Hugo的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载Hugo的Windows版本&lt;/li&gt;
&lt;li&gt;解压到指定目录&lt;/li&gt;
&lt;li&gt;将Hugo的可执行文件路径添加到系统环境变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="创建新站点"&gt;创建新站点&lt;/h2&gt;
&lt;p&gt;使用以下命令创建一个新的Hugo站点：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;hugo new site mydocs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="下载插件"&gt;下载插件&lt;/h2&gt;
&lt;h2 id="添加内容"&gt;添加内容&lt;/h2&gt;
&lt;p&gt;在content目录下创建Markdown文件来添加内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;hugo new blog/my-first-post.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="运行开发服务器"&gt;运行开发服务器&lt;/h2&gt;
&lt;p&gt;使用以下命令启动开发服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;hugo server -D --environment development &lt;span class="c1"&gt;#如果未设置环境变量则不需要指定环境。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="部署网站"&gt;部署网站&lt;/h2&gt;
&lt;p&gt;使用以下命令生成静态文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;然后将public目录下的文件部署到Web服务器即可，注意每次推送前运行hugo更新public文件夹&lt;/li&gt;
&lt;li&gt;若有更新域名，请删除public后，再运行hugo重新生成public，否则会出现路由错误的情况。&lt;/li&gt;
&lt;li&gt;为了方便新建.sh脚本文件，命名为.command.sh&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 判断是否已初始化Git仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -d &lt;span class="s2"&gt;&amp;#34;.git&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;未检测到Git仓库，正在初始化...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; git init
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Git仓库已初始化&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 创建.gitignore文件，排除不需要版本控制的文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;cat &amp;gt; .gitignore &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt;resources/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt;.DS_Store
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt;node_modules/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt;.hugo_build.lock
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 添加所有文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 提交更改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git commit -m &lt;span class="s2"&gt;&amp;#34;更新博客&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 检查是否已关联远程仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;REMOTE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git remote get-url origin 2&amp;gt;/dev/null&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$REMOTE_URL&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;未检测到远程仓库，正在添加...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; git remote add origin https://github.com/bluespace3/bluespace3.github.io
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;已关联远程仓库：&lt;/span&gt;&lt;span class="nv"&gt;$REMOTE_URL&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 推送到GitHub&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git push -u origin main --force
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;终端运行 ..command.sh&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="更新维护"&gt;更新维护&lt;/h2&gt;
&lt;p&gt;后期维护有许多要留意的地方否则容易踩坑。&lt;/p&gt;</description></item><item><title>linux安装python</title><link>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/linux%E5%AE%89%E8%A3%85python/</link><pubDate>Wed, 05 Mar 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/linux%E5%AE%89%E8%A3%85python/</guid><description>&lt;hr&gt;
&lt;p&gt;title: &amp;ldquo;linux安装python&amp;rdquo;&lt;/p&gt;
&lt;p&gt;categories: [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;linux&amp;rdquo;, &amp;ldquo;python&amp;rdquo;]
date: 2025-03-20T12:59:32+08:00&lt;/p&gt;
&lt;p&gt;draft: false&lt;/p&gt;
&lt;h2 id="tags-linux-python-教程"&gt;tags: [&amp;ldquo;linux&amp;rdquo;, &amp;ldquo;python&amp;rdquo;, &amp;ldquo;教程&amp;rdquo;]&lt;/h2&gt;
&lt;p&gt;#依赖包&lt;/p&gt;
&lt;p&gt;yum -y groupinstall &amp;ldquo;Development tools&amp;rdquo;&lt;/p&gt;
&lt;p&gt;yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel&lt;/p&gt;
&lt;p&gt;#下载 Python3&lt;/p&gt;
&lt;p&gt;wget &lt;a href="https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz"&gt;https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#创建文件夹&lt;/p&gt;
&lt;p&gt;mkdir /usr/local/python3&lt;/p&gt;
&lt;p&gt;#解压编译安装&lt;/p&gt;
&lt;p&gt;tar -xvJf Python-3.6.2.tar.xz&lt;/p&gt;
&lt;p&gt;cd Python-3.6.2&lt;/p&gt;
&lt;p&gt;./configure &amp;ndash;prefix=/usr/local/python3&lt;/p&gt;
&lt;p&gt;make &amp;amp;&amp;amp; make install&lt;/p&gt;
&lt;p&gt;#给个软链&lt;/p&gt;
&lt;p&gt;ln -sf /usr/local/python3/bin/python3 /usr/bin/python3&lt;/p&gt;
&lt;p&gt;ln -sf /usr/local/python3/bin/pip3 /usr/bin/pip3&lt;/p&gt;</description></item><item><title>linux常用命令</title><link>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 05 Mar 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>&lt;hr&gt;
&lt;p&gt;title: &amp;ldquo;linux常用命令&amp;rdquo;
categories: [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;linux&amp;rdquo;]
date: 2025-03-20T12:59:32+08:00&lt;/p&gt;
&lt;p&gt;draft: false&lt;/p&gt;
&lt;h2 id="tags-linux常用命令"&gt;tags: [&amp;ldquo;linux常用命令&amp;rdquo;]&lt;/h2&gt;
&lt;h3 id="文章目录"&gt;文章目录&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一、目录操作
&lt;ul&gt;
&lt;li&gt;1、批量操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二、文件操作&lt;/li&gt;
&lt;li&gt;三、文件内容操作（查看日志，更改配置文件）
&lt;ul&gt;
&lt;li&gt;1、grep(检索文件内容)&lt;/li&gt;
&lt;li&gt;2、awk(数据统计)&lt;/li&gt;
&lt;li&gt;3、sed(替换文件内容)&lt;/li&gt;
&lt;li&gt;4、管道操作符 &lt;code&gt;|&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;四、系统日志位置&lt;/li&gt;
&lt;li&gt;五、创建与删除软连接&lt;/li&gt;
&lt;li&gt;六、压缩和解压缩&lt;/li&gt;
&lt;li&gt;七、Linux下文件的详细信息&lt;/li&gt;
&lt;li&gt;八、常用的docker容器的命令：&lt;/li&gt;
&lt;li&gt;九、运维常用命令
&lt;ul&gt;
&lt;li&gt;1、查看服务器端口号是否可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十、yum常用命令&lt;/li&gt;
&lt;li&gt;十一、其他命令
&lt;ul&gt;
&lt;li&gt;1、xargs&lt;/li&gt;
&lt;li&gt;2、curl语法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十二、Linux内核优化&lt;/li&gt;
&lt;li&gt;十三、用户权限操作
&lt;ul&gt;
&lt;li&gt;1、用户操作&lt;/li&gt;
&lt;li&gt;2、添加组&lt;/li&gt;
&lt;li&gt;3、sudo用户权限操作&lt;/li&gt;
&lt;li&gt;4、更换文件所有者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十四、TOP
&lt;ul&gt;
&lt;li&gt;1、统计信息区&lt;/li&gt;
&lt;li&gt;2、进程信息区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十五、文件安装
&lt;ul&gt;
&lt;li&gt;1、文件下载(lrzsz)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十六、文章PDF版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux 系统目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-Shell" data-lang="Shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── bin -&amp;gt; usr/bin &lt;span class="c1"&gt;# 用于存放二进制命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── boot &lt;span class="c1"&gt;# 内核及引导系统程序所在的目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── dev &lt;span class="c1"&gt;# 所有设备文件的目录（如磁盘、光驱等）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── etc &lt;span class="c1"&gt;# 配置文件默认路径、服务启动命令存放目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── home &lt;span class="c1"&gt;# 用户家目录，root用户为/root&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── lib -&amp;gt; usr/lib &lt;span class="c1"&gt;# 32位库文件存放目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── lib64 -&amp;gt; usr/lib64 &lt;span class="c1"&gt;# 64位库文件存放目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── media &lt;span class="c1"&gt;# 媒体文件存放目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── mnt &lt;span class="c1"&gt;# 临时挂载设备目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── opt &lt;span class="c1"&gt;# 自定义软件安装存放目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── proc &lt;span class="c1"&gt;# 进程及内核信息存放目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── root &lt;span class="c1"&gt;# Root用户家目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── run &lt;span class="c1"&gt;# 系统运行时产生临时文件，存放目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── sbin -&amp;gt; usr/sbin &lt;span class="c1"&gt;# 系统管理命令存放目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── srv &lt;span class="c1"&gt;# 服务启动之后需要访问的数据目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── sys &lt;span class="c1"&gt;# 系统使用目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── tmp &lt;span class="c1"&gt;# 临时文件目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── usr &lt;span class="c1"&gt;# 系统命令和帮助文件目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;└── var &lt;span class="c1"&gt;# 存放内容易变的文件的目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="m"&gt;12345678910111213141516171819&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id="一目录操作"&gt;一、目录操作&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-Shell" data-lang="Shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt; 查看当前工作目录
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;clear 清除屏幕
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ 当前用户目录
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; / 根目录
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; - 上一次访问的目录
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; .. 上一级目录
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="m"&gt;123456&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看目录内信息&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>mac电脑使用速记</title><link>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/mac%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E9%80%9F%E8%AE%B0/</link><pubDate>Wed, 05 Mar 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/mac%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E9%80%9F%E8%AE%B0/</guid><description>&lt;p&gt;在Mac终端中，有几种方法可以连续删除命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 Ctrl + W ：删除光标前的一个单词&lt;/li&gt;
&lt;li&gt;使用 Ctrl + U ：删除光标前的整行内容&lt;/li&gt;
&lt;li&gt;使用 Ctrl + K ：删除光标后的整行内容&lt;/li&gt;
&lt;li&gt;使用 Option + Delete ：删除光标前的一个单词（与 Ctrl + W 类似）
这些快捷键可以帮助你快速删除命令内容，提高终端操作效率。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>md格式笔记使用指南</title><link>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/md%E6%A0%BC%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link><pubDate>Wed, 05 Mar 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E6%95%99%E7%A8%8B/md%E6%A0%BC%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid><description>&lt;h2 id="一核心语法精要"&gt;一、核心语法精要&lt;/h2&gt;
&lt;h3 id="1-标题与段落"&gt;1. 标题与段落&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-markdown" data-lang="markdown"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gh"&gt;# 主标题（H1）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gh"&gt;&lt;/span&gt;&lt;span class="gu"&gt;## 二级标题（H2）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gu"&gt;&lt;/span&gt;普通段落直接换行书写，空行分隔段落
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;2.&lt;/span&gt; 列表系统
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;无序列表项
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;[x] 已完成任务
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;[ ] 待办事项
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;有序列表
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;第二项
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;3.&lt;/span&gt; 代码展示
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;```python
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;def hello_hugo():
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;print(&amp;#34;Welcome to Hugo Blog!&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、Hugo增强特性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;短代码应用
{{&amp;lt; highlight python &amp;ldquo;linenos=table&amp;rdquo; /&amp;gt;}}
def hugo_shortcode():
return &amp;ldquo;Hugo特色功能&amp;rdquo;
{{&amp;lt;/ /highlight &amp;gt;}}&lt;/li&gt;
&lt;li&gt;响应式图片
{{&amp;lt; image
src=&amp;quot;/images/md-example.png&amp;quot;
alt=&amp;ldquo;Markdown示例&amp;rdquo;
caption=&amp;ldquo;图1. 文档结构示意图&amp;rdquo;
width=&amp;ldquo;80%&amp;rdquo;
&lt;blockquote&gt;
&lt;p&gt;}}&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-markdown" data-lang="markdown"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gu"&gt;### 1. 基础语法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="gu"&gt;&lt;/span&gt;```markdown
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;![&lt;span class="nt"&gt;替代文字&lt;/span&gt;](&lt;span class="na"&gt;图片路径&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;示例：
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;![&lt;span class="nt"&gt;技术架构图&lt;/span&gt;](&lt;span class="na"&gt;/images/tech-arch.png&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、可视化元素
流程图示例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;graph TD
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;A[开始] --&amp;gt; B{判断}
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;B --&amp;gt;|条件1| C[操作1]
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;B --&amp;gt;|条件2| D[操作2]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;数据表格&lt;/p&gt;</description></item><item><title>MySQL -- 复合查询</title><link>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/mysql----%E5%A4%8D%E5%90%88%E6%9F%A5%E8%AF%A2/</link><pubDate>Wed, 05 Mar 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/mysql----%E5%A4%8D%E5%90%88%E6%9F%A5%E8%AF%A2/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&amp;amp;spm=1001.2101.3001.7020"&gt;数据库&lt;/a&gt;的查询是数据库使用中比较重要的环节，前面的基础查询比较简单，不做介绍，可自行查阅。本文主要介绍复合查询，并结合用例进行讲解。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文的用例依据Soctt模式的经典测试表，可以自行下载，也可以自己创建
链接：点这里跳转
自行创建步骤如下：&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="0预备工作"&gt;0、预备工作&lt;/h2&gt;
&lt;h3 id="01-建表"&gt;0.1 建表&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;创建&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt; &lt;span class="err"&gt;表（部门表）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;TABLE&lt;/span&gt; &lt;span class="nf"&gt;dept&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;deptno&lt;/span&gt; &lt;span class="n"&gt;INT&lt;/span&gt; &lt;span class="n"&gt;PRIMARY&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;部门编号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;dname&lt;/span&gt; &lt;span class="nf"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;部门名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="nf"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;部门位置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;创建&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="err"&gt;表（员工表）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;TABLE&lt;/span&gt; &lt;span class="nf"&gt;emp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;empno&lt;/span&gt; &lt;span class="n"&gt;INT&lt;/span&gt; &lt;span class="n"&gt;PRIMARY&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;员工编号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;ename&lt;/span&gt; &lt;span class="nf"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;员工姓名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="nf"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;职位&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;mgr&lt;/span&gt; &lt;span class="n"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;上级经理编号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;hiredate&lt;/span&gt; &lt;span class="n"&gt;DATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;入职日期&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;sal&lt;/span&gt; &lt;span class="nf"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;工资&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;comm&lt;/span&gt; &lt;span class="nf"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;奖金&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;deptno&lt;/span&gt; &lt;span class="n"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;部门编号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;FOREIGN&lt;/span&gt; &lt;span class="nf"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deptno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;REFERENCES&lt;/span&gt; &lt;span class="nf"&gt;dept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deptno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;创建&lt;/span&gt; &lt;span class="n"&gt;salgrade&lt;/span&gt; &lt;span class="err"&gt;表（工资等级表）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;TABLE&lt;/span&gt; &lt;span class="nf"&gt;salgrade&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="n"&gt;INT&lt;/span&gt; &lt;span class="n"&gt;PRIMARY&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;工资等级&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;losal&lt;/span&gt; &lt;span class="nf"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;最低工资&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;hisal&lt;/span&gt; &lt;span class="nf"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;最高工资&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mi"&gt;1234567891011121314151617181920212223242526&lt;/span&gt;&lt;span class="n"&gt;AI写代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="02-插入测试数据"&gt;0.2 插入测试数据&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;插入&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt; &lt;span class="err"&gt;表数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;INSERT&lt;/span&gt; &lt;span class="n"&gt;INTO&lt;/span&gt; &lt;span class="nf"&gt;dept&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deptno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;VALUES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ACCOUNTING&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;NEW&lt;/span&gt; &lt;span class="n"&gt;YORK&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;RESEARCH&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;DALLAS&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SALES&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;CHICAGO&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;OPERATIONS&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;BOSTON&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;插入&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="err"&gt;表数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;INSERT&lt;/span&gt; &lt;span class="n"&gt;INTO&lt;/span&gt; &lt;span class="nf"&gt;emp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;empno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mgr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hiredate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deptno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;VALUES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SMITH&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;CLERK&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7902&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1980&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;800.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7499&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ALLEN&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SALESMAN&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7698&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1600.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;300.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7521&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;WARD&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SALESMAN&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7698&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1250.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;500.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7566&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;JONES&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;MANAGER&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7839&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2975.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7654&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;MARTIN&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SALESMAN&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7698&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1250.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1400.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7698&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;BLAKE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;MANAGER&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7839&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2850.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7782&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;CLARK&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;MANAGER&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7839&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2450.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7788&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SCOTT&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ANALYST&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7566&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1982&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3000.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7839&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;KING&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;PRESIDENT&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5000.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7844&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TURNER&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SALESMAN&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7698&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1500.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7876&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ADAMS&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;CLERK&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7788&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1983&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1100.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7900&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;JAMES&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;CLERK&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7698&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;950.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7902&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;FORD&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ANALYST&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7566&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1981&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3000.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7934&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;MILLER&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;CLERK&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7782&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1982&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1300.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;插入&lt;/span&gt; &lt;span class="n"&gt;salgrade&lt;/span&gt; &lt;span class="err"&gt;表数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;INSERT&lt;/span&gt; &lt;span class="n"&gt;INTO&lt;/span&gt; &lt;span class="nf"&gt;salgrade&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;losal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hisal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;VALUES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;700&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="mi"&gt;12345678910111213141516171819202122232425262728293031&lt;/span&gt;&lt;span class="n"&gt;AI写代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建好以后，如果表的内容和下图一样，那基本就没问题了&lt;/p&gt;</description></item><item><title>python非同级目录调用报错</title><link>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python%E9%9D%9E%E5%90%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%B0%83%E7%94%A8%E6%8A%A5%E9%94%99/</link><pubDate>Wed, 05 Mar 2025 14:48:25 +0000</pubDate><guid>https://bluespace3.github.io/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python%E9%9D%9E%E5%90%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%B0%83%E7%94%A8%E6%8A%A5%E9%94%99/</guid><description>&lt;h2 id="项目结构"&gt;项目结构：&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://guangpuyun.feishu.cn/space/api/box/stream/download/asynccode/?code=N2E4ZjQ0N2I5MmEwYWExMjg1YmVmOTcyZTBhNTk1ZTlfdXlaSzZjU09wSE5mR1AyYTBuYVg1SElQcHJIUENSVWpfVG9rZW46S3AyMmI4bFN1b2VjeG54V251Q2NzMHBhbm5nXzE3NDI0NjExMTk6MTc0MjQ2NDcxOV9WNA" alt=""&gt;&lt;/p&gt;
&lt;h2 id="问题"&gt;问题：&lt;/h2&gt;
&lt;p&gt;执行文件调用dir1，间接调用dir2。执行时报错：“ModuleNotFoundError: No module named &amp;lsquo;dir1.dir2&amp;rsquo;;”&lt;/p&gt;
&lt;h2 id="解决方法"&gt;解决方法：&lt;/h2&gt;
&lt;p&gt;dir1文件导包时做处理。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主函数加入这四行，将项目的根目录(webapp)的路径加入到系统PATH中；
import os,sys&lt;/p&gt;
&lt;p&gt;from pathlib import Path&lt;/p&gt;
&lt;p&gt;sys.path[0] = str(Path(sys.path[0]).parent.parent)&lt;/p&gt;
&lt;p&gt;sys.path.append(os.getcwd())&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;且导包从项目执行入口文件同级开始写&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://guangpuyun.feishu.cn/space/api/box/stream/download/asynccode/?code=MzlhZjJjZjgzNzk4YjdjNzU2ZWQ1ZDdjMjA5ODI0MDZfTzN2ZmlQOVM0a1BERU95VkY1amZ5bTFXMEJsc09pTExfVG9rZW46UlgyTmJCdHdLb0I5Z2d4VktJcmNEbDNvblljXzE3NDI0NjExMTk6MTc0MjQ2NDcxOV9WNA" alt=""&gt;&lt;/p&gt;</description></item></channel></rss>