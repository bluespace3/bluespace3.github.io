<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/css/xml-style.css" type="text/css"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>静态网站 on 蓝色空间号-新世界的探索者</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in 静态网站 on 蓝色空间号-新世界的探索者</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 21 Mar 2025 23:00:32 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>将github变为免费图床</title>
      <link>http://localhost:1313/post/%E4%BD%BF%E7%94%A8gihub%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Fri, 21 Mar 2025 23:00:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BD%BF%E7%94%A8gihub%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/</guid>
      <description>&lt;h2 id=&#34;使用-github-作为免费图床的文档&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-github-%e4%bd%9c%e4%b8%ba%e5%85%8d%e8%b4%b9%e5%9b%be%e5%ba%8a%e7%9a%84%e6%96%87%e6%a1%a3&#34;&gt;&lt;/a&gt;
使用 GitHub 作为免费图床的文档
&lt;/h2&gt;&lt;p&gt;最近就想找一款免费的图床来放置自己的图片，逛了一圈下来发现GitHub可以白嫖，于是乎，就有了这篇文章。&lt;/p&gt;
&lt;p&gt;GitHub 是一个非常流行的代码托管平台，除了代码存储外，你还可以使用 GitHub 来托管静态资源，比如图片。通过将图片上传到 GitHub 的仓库，你可以轻松获取图片的 URL，从而在网页或文档中嵌入这些图片。以下是如何使用 GitHub 作为免费图床的详细步骤。&lt;/p&gt;
&lt;h3 id=&#34;步骤-1-创建-github-仓库&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%ad%a5%e9%aa%a4-1-%e5%88%9b%e5%bb%ba-github-%e4%bb%93%e5%ba%93&#34;&gt;&lt;/a&gt;
步骤 1: 创建 GitHub 仓库
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;登录到 &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击右上角的 &amp;ldquo;+&amp;rdquo; 按钮，然后选择 &amp;ldquo;New repository&amp;rdquo;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;填写仓库的名称（例如：&lt;code&gt;my-image-hosting&lt;/code&gt;），并设置为公开（Public）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击 &amp;ldquo;Create repository&amp;rdquo; 创建仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/v2-cdd72cbacf64cf512b0426eb2362d3e6_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;步骤-2-github获取个人的token&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%ad%a5%e9%aa%a4-2-github%e8%8e%b7%e5%8f%96%e4%b8%aa%e4%ba%ba%e7%9a%84token&#34;&gt;&lt;/a&gt;
步骤 2: GitHub获取个人的Token
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;访问：&lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;settings-tokens&lt;/a&gt; ，点击&lt;strong&gt;Generate new token&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://picx.zhimg.com/v2-2148c04aa5bc07ccea01b2273ba65033_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.设置 token 属性 ，Expiration：永不过期，Select scopes：&lt;code&gt;repo&lt;/code&gt; 一定要全选，其他的无所谓 ，点击最下方&lt;strong&gt;创建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pica.zhimg.com/v2-ef2f47f1c64e0b095e040cf103ea8b62_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;就会获得一个token字符串， &lt;strong&gt;⚠️ 注意：一定要收藏好 token，因为只会显示一次！&lt;/strong&gt;，关掉这个页面就再也看不见了。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;[!IMPORTANT] &lt;strong&gt;后续会继续使用这个token!!!!&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://pica.zhimg.com/v2-7efb7778246d4e3964471f46c290f790_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;步骤-3-下载picgo&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%ad%a5%e9%aa%a4-3-%e4%b8%8b%e8%bd%bdpicgo&#34;&gt;&lt;/a&gt;
步骤 3: 下载PicGo
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在PicGo最新页面上下载它的安装包。&lt;a href=&#34;https://github.com/Molunerfinn/PicGo/releases&#34;&gt;PicGo下载页面&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://picx.zhimg.com/v2-4e1070ec6988ea104dd9f339af322d4b_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装PicGo。无需赘述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://picx.zhimg.com/v2-86772b08f48e060e991b724d7d11b677_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;PicGo 上传区配置选中你的配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/v2-01a76c0126a75365b9bdc2e2163edda7_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>测试平台教程</title>
      <link>http://localhost:1313/post/%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%88%86%E4%BA%AB/</link>
      <pubDate>Fri, 21 Mar 2025 12:59:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;p&gt;一、基本介绍：（）
桌面端工具（一年左右），使用python的wxpython框架编写，使用pyinstaller打包为桌面exe文件；缺点：体积大，不便于分享；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/image_0fa5b6bdd33056f5c14c2ba21dca4298.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;web端应用（10月初至今）：flask+vue实现；优点，通过脚本实现热更新；链接形式便于分享。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/image_554bf84092b63f4dfeef955bec300c72.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;二、功能介绍：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/image_d8f9cc72d69a56ab872809e6e0c32ca7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;三、技术实现&lt;/p&gt;
&lt;p&gt;测试平台采用前后端分离的方式实现:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后端由flask框架实现；
（1）flask项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;./images/image_08bf969bb5e6e6a6c2866b5ecd815b9a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）在项目入口文件中构建接口
Flask：用于创建一个flask应用,app = Flask(&lt;strong&gt;name&lt;/strong&gt;)
CORS:解决跨域问题，cors = CORS(app)
request:接受请求的参数，request.args.get()；phone = request.json[]
jsonify:以json格式返回结果：jsonify({&amp;ldquo;data&amp;rdquo;: res})
接口的基本组成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/image_1e0619b874f00563f4df88a914e7b216.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;构建一个接口的基本步骤：
导包：Flask、CORS、request、jsonify
在app.route()装饰器中定义接口的请求类型、url路径
写一个接口函数
获取入参（可选）
get请求 request.args.get()
post请求 request.json[]
对得到的参数进行基本校验：如参数类型校验、字段长度、是否空、鉴权等。
根据传参进行逻辑处理，调用对应功能，得到结果
构建响应头（可选，返回类型是文件时必须）
构建结果，使用jsonify将返回结果构建成一个js （可选）
return结果
启动flask
app.run(ip,port,debug=True),其中debug=True代表以调试模式启动，代码改动后自动重启；debug默认为False。
包的管理 requirements.txt
代码中引入了的包，需要填写在该文件中，格式：“ 包名==版本号”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/image_ddafd5dad0788c85d978475b2b619b09.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（3）采用gunnicorn+gevent部署flask项目
介绍：
一个HTTP 服务器，可以增加项目的并发，通常和gevent一起使用。
安装gunicorn和gevent：
pip install gunicorn  -i  &lt;a href=&#34;https://pypi.tuna.tsinghua.edu.cn/simple&#34;&gt;https://pypi.tuna.tsinghua.edu.cn/simple&lt;/a&gt;
pip install gevent-i  &lt;a href=&#34;https://pypi.tuna.tsinghua.edu.cn/simple&#34;&gt;https://pypi.tuna.tsinghua.edu.cn/simple&lt;/a&gt;
配置文件 gunicorn.conf.py
workers = 10   定义同时开启的处理请求的进程数量，根据网站流量适当调整
worker_class = &amp;ldquo;gevent&amp;rdquo;   采用gevent库，支持异步处理请求，提高吞吐量
bind = &amp;ldquo;0.0.0.0:80&amp;rdquo;     监听IP放宽，以便于Docker之间、Docker和宿主机之间的通信,docker部署固定
采用启动服务：
gunicorn flask_index:app -c ./gunicorn.conf.py
注意：Gunicorn只能运行在Linux环境中，不支持windows平台，因此在windows调试的时候不要用这个方式启动flask；
2. 前端：vue 、node.js（前端的包管理工具，类似python的pip包管理工具）、vue-cli（vue项目的脚手架）、element-ui、echats提供页面交互;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker常用命令</title>
      <link>http://localhost:1313/post/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;docker pull ubuntu 载入ubuntu 镜像&lt;/p&gt;
&lt;p&gt;docker pull training/webapp  # 载入镜像&lt;/p&gt;
&lt;p&gt;docker pull python:3.7 安装python镜像&lt;/p&gt;
&lt;p&gt;docker pull nginx 安装nginx镜像&lt;/p&gt;
&lt;p&gt;docker run -it python:3.7 /bin/bash 进入python镜像&lt;/p&gt;
&lt;p&gt;连接不上时，终端输入：&lt;/p&gt;
&lt;p&gt;1.cd &amp;ldquo;C:\Program Files\Docker\Docker&amp;rdquo;&lt;/p&gt;
&lt;p&gt;2.DockerCli.exe -SwitchDaemon&lt;/p&gt;
&lt;p&gt;docker run -it ubuntu /bin/bash 启用进入容器&lt;/p&gt;
&lt;p&gt;exit退出容器&lt;/p&gt;
&lt;p&gt;docker run -d -P training/webapp python app.py 后台启用容器并随机映射到本机端口&lt;/p&gt;
&lt;p&gt;docker run -d -p 5000:5000 training/webapp python app.py后台启用容器并指定映射到&lt;/p&gt;
&lt;p&gt;docker logs -f id 查看应用日志&lt;/p&gt;
&lt;p&gt;docker logs  -f -t &amp;ndash;tail=100 dockerid 动态查看最新100条日志&lt;/p&gt;
&lt;p&gt;docker top  id 查看容器内部应用进程&lt;/p&gt;
&lt;p&gt;docker ps -a 查看所有容器(可查容器id)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo静态网站生成器入门指南</title>
      <link>http://localhost:1313/post/hugo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hugo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h2 id=&#34;什么是hugo&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afhugo&#34;&gt;&lt;/a&gt;
什么是Hugo？
&lt;/h2&gt;&lt;p&gt;Hugo是一个用Go语言编写的快速、现代的静态网站生成器。它可以将Markdown文件转换为HTML页面，非常适合构建文档网站、博客等。&lt;/p&gt;
&lt;h2 id=&#34;hugo的主要特点&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#hugo%e7%9a%84%e4%b8%bb%e8%a6%81%e7%89%b9%e7%82%b9&#34;&gt;&lt;/a&gt;
Hugo的主要特点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;极快的构建速度&lt;/li&gt;
&lt;li&gt;丰富的主题支持&lt;/li&gt;
&lt;li&gt;简单的Markdown内容管理&lt;/li&gt;
&lt;li&gt;强大的模板系统&lt;/li&gt;
&lt;li&gt;内置的短代码功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装hugo&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%89%e8%a3%85hugo&#34;&gt;&lt;/a&gt;
安装Hugo
&lt;/h2&gt;&lt;p&gt;在Windows上安装Hugo的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载Hugo的Windows版本&lt;/li&gt;
&lt;li&gt;解压到指定目录&lt;/li&gt;
&lt;li&gt;将Hugo的可执行文件路径添加到系统环境变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建新站点&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%88%9b%e5%bb%ba%e6%96%b0%e7%ab%99%e7%82%b9&#34;&gt;&lt;/a&gt;
创建新站点
&lt;/h2&gt;&lt;p&gt;使用以下命令创建一个新的Hugo站点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo new site mydocs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;下载插件&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%b8%8b%e8%bd%bd%e6%8f%92%e4%bb%b6&#34;&gt;&lt;/a&gt;
下载插件
&lt;/h2&gt;&lt;h2 id=&#34;添加内容&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%86%85%e5%ae%b9&#34;&gt;&lt;/a&gt;
添加内容
&lt;/h2&gt;&lt;p&gt;在content目录下创建Markdown文件来添加内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo new blog/my-first-post.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;运行开发服务器&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%bf%90%e8%a1%8c%e5%bc%80%e5%8f%91%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;&lt;/a&gt;
运行开发服务器
&lt;/h2&gt;&lt;p&gt;使用以下命令启动开发服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo server -D --environment development &lt;span class=&#34;c1&#34;&gt;#如果未设置环境变量则不需要指定环境。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署网站&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e9%83%a8%e7%bd%b2%e7%bd%91%e7%ab%99&#34;&gt;&lt;/a&gt;
部署网站
&lt;/h2&gt;&lt;p&gt;使用以下命令生成静态文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;然后将public目录下的文件部署到Web服务器即可，注意每次推送前运行hugo更新public文件夹&lt;/li&gt;
&lt;li&gt;若有更新域名，请删除public后，再运行hugo重新生成public，否则会出现路由错误的情况。&lt;/li&gt;
&lt;li&gt;为了方便新建.sh脚本文件，命名为.command.sh&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 判断是否已初始化Git仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;.git&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;未检测到Git仓库，正在初始化...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Git仓库已初始化&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建.gitignore文件，排除不需要版本控制的文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &amp;gt; .gitignore &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;resources/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;.DS_Store
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;node_modules/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;.hugo_build.lock
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 添加所有文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 提交更改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;更新博客&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 检查是否已关联远程仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;REMOTE_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git remote get-url origin 2&amp;gt;/dev/null&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$REMOTE_URL&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;未检测到远程仓库，正在添加...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    git remote add origin https://github.com/bluespace3/bluespace3.github.io
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;已关联远程仓库：&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$REMOTE_URL&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 推送到GitHub&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin main --force
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;终端运行 ..command.sh&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;更新维护&#34;&gt;
&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%9b%b4%e6%96%b0%e7%bb%b4%e6%8a%a4&#34;&gt;&lt;/a&gt;
更新维护
&lt;/h2&gt;&lt;p&gt;后期维护有许多要留意的地方否则容易踩坑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>scrapy爬柚子网示例</title>
      <link>http://localhost:1313/post/scrapy%E7%88%AC%E6%9F%9A%E5%AD%90%E7%BD%91%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/scrapy%E7%88%AC%E6%9F%9A%E5%AD%90%E7%BD%91%E7%A4%BA%E4%BE%8B/</guid>
      <description>&lt;p&gt;柚子网https://www.uu-zz.com/&lt;/p&gt;
&lt;p&gt;爬取页码&lt;/p&gt;
&lt;p&gt;遍历页面内对应的视频集的链接&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/O1YCbvbQBoiZYHxxbO7cqOi6nKb?preview_type=16&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;遍历视频内子视频链接&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/CKMPbtR4souEnDxWowNcxAuenNc?preview_type=16&#34; alt=&#34;&#34;&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://security.feishu.cn/link/safety?target=https%3A%2F%2Fwww.uu-zz.com%2F%2B%E5%AD%90%E8%A7%86%E9%A2%91%E9%93%BE%E6%8E%A5&amp;amp;scene=ccm&amp;amp;logParams=%7B%22location%22%3A%22ccm_mindnote%22%7D&amp;amp;lang=zh-CN&#34;&gt;https://www.uu-zz.com/+子视频链接&lt;/a&gt;，发送get请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/ClLDbx3s5o29xpxWKrncnG3Enzg?preview_type=16&#34; alt=&#34;&#34;&gt;!&lt;/p&gt;
&lt;p&gt;获得m3u8文件，储存在数据库&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>unnitest</title>
      <link>http://localhost:1313/post/unnitest%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 20 Mar 2025 12:59:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/unnitest%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;一、引入
&lt;ul&gt;
&lt;li&gt;1.导包，import unnitest&lt;/li&gt;
&lt;li&gt;2.编写测试类，继承unnitest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二、运行
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.unnitest.main(),运行全部用例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.测试套：testsuite&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建：suite=unnitest.Testsuite()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试套添加用例：suite.addtTest（类（方法））&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;images/1742460595596.png&#34; alt=&#34;1742460595596&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行：runner=unnitest.TextTestRunner()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行：runner.run(suite)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;*运行必须在命令行运行否则是运行全部用例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三、生成报告&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image/unnitest%E7%AC%94%E8%AE%B0/1742460643666.png&#34; alt=&#34;1742460643666&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.将HTMLTestRunner.py文件放到项目文件夹下&lt;/li&gt;
&lt;li&gt;2.导包：如左图&lt;/li&gt;
&lt;li&gt;3.创建测试套，参考上方&lt;/li&gt;
&lt;li&gt;4.创建测试报告文件，且以测试套运行（参考左图）&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;image/unnitest%E7%AC%94%E8%AE%B0/1742460677985.png&#34; alt=&#34;1742460677985&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与pytest的异同&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;image/unnitest%E7%AC%94%E8%AE%B0/1742460760547.png&#34; alt=&#34;1742460760547&#34;&gt;
&lt;ul&gt;
&lt;li&gt;pytest以mark方式组织用例（而非套件）&lt;img src=&#34;image/unnitest%E7%AC%94%E8%AE%B0/1742460791823.png&#34; alt=&#34;1742460791823&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面试相关&lt;img src=&#34;image/unnitest%E7%AC%94%E8%AE%B0/1742460820437.png&#34; alt=&#34;1742460820437&#34;&gt;&lt;/li&gt;
&lt;li&gt;pycharm关闭pytest测试模式&lt;img src=&#34;image/unnitest%E7%AC%94%E8%AE%B0/1742460849632.png&#34; alt=&#34;1742460849632&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
